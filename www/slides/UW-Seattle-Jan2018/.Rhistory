# Chunk 2
cbc.df <-
read.csv("http://goo.gl/5xQObB",
colClasses = c(seat = "factor",
price = "factor"))
head(cbc.df[ , c(-4, -5)])
# Chunk 3
xtabs(choice ~ seat, data=cbc.df)
xtabs(choice ~ eng, data=cbc.df)
# Chunk 4
library(mlogit)
# Chunk 5
cbc.mlogit <-
mlogit.data(data    = cbc.df,
choice  = "choice",
shape   = "long",
varying = 3:6,
id.var  = "resp.id",
alt.levels = paste("pos", 1:3))
# Chunk 6
m1 <- mlogit(choice ~ 0 + seat + cargo + eng + price, data = cbc.mlogit)
summary(m1)
# Chunk 8
predict.mnl <- function(model, data) {
data.model <-
model.matrix(
update(model$formula, 0 ~ .),
data = data)[ , -1]
utility <- data.model %*% model$coef
share <- exp(utility) / sum(exp(utility))
cbind(share, data)
}
# Chunk 9
attrib <- list(seat  = c("6", "7", "8"),
cargo = c("2ft", "3ft"),
eng   = c("gas", "hyb", "elec"),
price = c("30", "35", "40"))
new.data <- expand.grid(attrib)[c(8, 1, 3, 41, 49, 26), ]  # selected products
# Chunk 10
predict.mnl(m1, new.data)
# Chunk 11
sensitivity.mnl <- function(model, attrib, base.data, competitor.data) {
# Function for creating data for a share-sensitivity chart
# model: mlogit object returned by mlogit() function
# attrib: list of vectors with attribute levels to be used in sensitivity
# base.data: data frame containing baseline design of target product
# competitor.data: data frame contining design of competitive set
data <- rbind(base.data, competitor.data)
base.share <- predict.mnl(model, data)[1,1]
share <- NULL
for (a in seq_along(attrib)) {
for (i in attrib[[a]]) {
data[1,] <- base.data
data[1,a] <- i
share <- c(share, predict.mnl(model, data)[1,1])
}
}
data.frame(level=unlist(attrib), share=share, increase=share-base.share)
}
base.data <- expand.grid(attrib)[c(8), ]
competitor.data <- expand.grid(attrib)[c(1, 3, 41, 49, 26), ]
tradeoff <- sensitivity.mnl(m1, attrib, base.data, competitor.data)
barplot(tradeoff$increase, horiz=FALSE, names.arg=tradeoff$level,
ylab="Change in Share for Baseline Product")
# Chunk 12
m3 <-
mlogit(choice ~ 0 + seat + cargo + eng
+ as.numeric(as.character(price)),
data = cbc.mlogit)
# Chunk 13
coef(m3)["cargo3ft"] /
(-coef(m3)["as.numeric(as.character(price))"] / 1000)
# Chunk 14
m1.rpar <- rep("n", length=length(m1$coef))
names(m1.rpar) <- names(m1$coef)
m1.rpar
# Chunk 15
m2.hier <-
mlogit(choice ~ 0 + seat + eng + cargo + price,
data = cbc.mlogit,
panel=TRUE, rpar = m1.rpar,
correlation = TRUE)
# Chunk 18
library(MASS)
predict.hier.mnl <- function(model, data, nresp=1000) {
data.model <-
model.matrix(update(model$formula, 0 ~ .),
data = data)[,-1]
coef.Sigma <- cov.mlogit(model)
coef.mu <- m2.hier$coef[1:dim(coef.Sigma)[1]]
draws <- mvrnorm(n=nresp, coef.mu, coef.Sigma)
shares <- matrix(NA, nrow=nresp,
ncol=nrow(data))
for (i in 1:nresp) {
utility <- data.model %*% draws[i, ]
share = exp(utility) / sum(exp(utility))
shares[i, ] <- share
}
cbind(colMeans(shares), data)
}
# Chunk 19
predict.hier.mnl(m2.hier, data=new.data)
