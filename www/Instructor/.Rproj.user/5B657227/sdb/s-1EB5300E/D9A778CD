{
    "contents" : "```{r setup, include=FALSE}\nopts_chunk$set(cache=TRUE)\n```\n\n\nR Quick Tour\n========================================================\nauthor: Chris Chapman, Google\ndate: February 2016\ncss: ../chapman-feit-slides.css\n\n**Analytics with Purpose Conference**  \nScottsdale, AZ\n\n\nBasics of R\n========================================================\nKey Points\n\n- It's where new methods are developed first\n- Over 8000 add on packages and tools\n- It is open source and free to use (except occasional packages)\n- Don't think of R as a ``statistics program.''\n- R is primarily a *programming language*\n\n\nReasons to Use R\n======================\n- For the latest statistics methods\n- For maximum power to develop your own analyses\n- It excels for iteration and automation\n- Large community support for advanced analytics\n- It's free\n- Includes integrating reporting capabilities (such as these slides)\n\n\nReasons not to Use R\n======================\n- It requires programming to do most analyses\n- Routine analyses are more difficult at first\n- Charting and plotting are not easy, and tend to be rather basic unless they are tweaked substantially\n\n\nGUI Tour\n======================\n- R base\n- R Studio\n\nSwitch to RStudio and look at the elements of the R IDE \n(integrated development environment)\n\n\n\nCustomer Satifaction Data (simulated)\n========================================================\nWe'll use a data set from Chapman & Feit (2015).\n\n- CSat survey with 4 items\n- 2 Satisfaction items: with Product & Sales\n- 2 Likelihood to recommend items: Product & Sales\n- Each item assessed on 7 point Likert scale\n\n\n\nCustomer Satifaction Model\n========================================================\n\n```{r, echo=FALSE}\nsatData <- read.csv(\"http://r-marketing.r-forge.r-project.org/data/rintro-chapter2.csv\")\n\nsatModel <- \"SAT =~ iProdSAT + iSalesSAT\n             REC =~ iProdREC + iSalesREC\n             REC ~  SAT \"\n\n# fit the structural model\nlibrary(lavaan)\nsat.fit <- cfa(satModel, data=satData)\n\n# plot the structural model\nlibrary(semPlot)\nsemPaths(sat.fit, what=\"path\", nCharNodes=9, residuals=FALSE)\n\n```\n\nCode\n========================================================\nLet's switch to R and walk through some typical code ...\n\n```{r, eval=FALSE}\nsatData <- read.csv(\"http://r-marketing.r-forge.r-project.org/data/rintro-chapter2.csv\")\n\n# examine the data\nhead(satData)\nstr(satData)\nsummary(satData)\n\n# convert Segment to a factor variable\nsatData$Segment <- factor(satData$Segment)\nsummary(satData)\n\n# Satisfaction by segment\nlibrary(ggplot2)\nby(satData$iProdSAT, satData$Segment, mean_se, mult=1.96)\n\n\n###### EXAMPLE OF PLOTTING\n\n### first aggregate the data we want to plot\n# ... there are other ways to do this, but this illustrates data frame manipulation\n\n# get the mean and standard errors\nprod.sat.seg <- aggregate(satData$iProdSAT, list(satData$Segment), mean_se, mult=1.96)\nstr(prod.sat.seg)\n\n# coerce those to a nice data frame\nprod.sat.seg <- data.frame(prod.sat.seg$Group.1, lapply(data.frame(prod.sat.seg$x), unlist))\nprod.sat.seg\n\n# and label the columns to be more readable\nnames(prod.sat.seg) <- c(\"Segment\", \"average\", \"lowerCI\", \"upperCI\")\nprod.sat.seg\n\n### the plot itself ...\n\n# now plot the interquartile range\np <- ggplot(data=prod.sat.seg, \n            aes(x=Segment, y=average, ymax=upperCI, ymin=lowerCI)) +\n     geom_point() +\n     geom_errorbar()\n\np\n\n# color the points and make them larger\np <- ggplot(data=prod.sat.seg, \n            aes(x=Segment, y=average, ymax=upperCI, ymin=lowerCI)) +\n     geom_point(aes(color=Segment), size=3) +      # <=======\n     geom_errorbar() \n\np\n\n# color the error bars and make them narrower\np <- ggplot(data=prod.sat.seg, \n            aes(x=Segment, y=average, ymax=upperCI, ymin=lowerCI)) +\n     geom_point(aes(color=Segment), size=3) +\n     geom_errorbar(aes(color=Segment), width=0.3)      # <=======\n\np\n\n# adjust the Y axis range\np <- ggplot(data=prod.sat.seg, \n            aes(x=Segment, y=average, ymax=upperCI, ymin=lowerCI)) +\n     geom_point(aes(color=Segment), size=3) +\n     geom_errorbar(aes(color=Segment), width=0.3) +\n     coord_cartesian(ylim=c(1, 5))    # <========\n\np\n\n# add some titles to be more readable\np <- ggplot(data=prod.sat.seg, \n            aes(x=Segment, y=average, ymax=upperCI, ymin=lowerCI)) +\n     geom_point(aes(color=Segment), size=3) +\n     geom_errorbar(aes(color=Segment), width=0.3) +\n     coord_cartesian(ylim=c(1, 5)) +\n     ggtitle(\"Average Sat and Confidence Interval by Segment\") +    # <=====\n     ylab(\"Mean satisfaction and 95% CI\")\n\np\n\n\n########## CORRELATIONS\n\n# correlation matrix\nlibrary(corrplot)\ncorrplot(cor(satData[ , -3]))\n\n# tinker with the plot\ncorrplot.mixed(cor(satData[ , -3]))\n\n\n#### ADVANCED MODELING. EXAMPLE: SAT/REC STRUCTURAL MODEL\n\n# define a structural model for Satisfaction and Recommendation\nsatModel <- \"SAT =~ iProdSAT + iSalesSAT\n             REC =~ iProdREC + iSalesREC\n             REC ~  SAT \"\n\n# fit the structural model\nlibrary(lavaan)\nsat.fit <- cfa(satModel, data=satData)\n\n# look at the fit\nsummary(sat.fit, fit.measures=TRUE)\n\n# plot the structural model\nlibrary(semPlot)\nsemPaths(sat.fit, what=\"est\", nCharNodes=9, residuals=FALSE)\n\n```\n\n\nPros and Cons\n========================================================\n**Pro**  \n1. Extreme power and precision. It does exactly what you want.  \n2. Complete flexibility at every step  \n3. Once script is done it is reusable and re-runnable   \n\n**Con**   \n1. It only does exactly what you tell it. Defaults are missing or ugly.  \n2. You have to write code.  \n3. Everything takes longer ... the *first* time.  \n\n\nNext Steps\n========================================================\n1. Get R from r-project.org\n2. Get RStudio from rstudio.com. \n3. See starting points at [CRAN Task Views](https://cran.r-project.org/web/views/)\n3. Get a tutorial (maybe this book?)\n\n![R book](Chapman_Revised_Cover-large.png)\n\n\nThe Most Important Things\n========================================================\nTo learn R, you will need:\n- Skill or genuine interest in learning to **program**\n- A **real data problem** that you need to solve\n- Routine **methods that you understand** well (e.g., ANOVA, lm)\n- **Time** to work through the steep learning curve\n- **Discipline** to force yourself to finish the project!\n- Ability to **iterate** on successive projects, as it gets easier and easier\n\nOnly try advanced/new methods after you are fluent in the basics.\n\n\n\nQ&A\n========================================================\nThank you!\n\nChris Chapman\ncchapman@google.com\n",
    "created" : 1453498881513.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2565178780",
    "id" : "D9A778CD",
    "lastKnownWriteTime" : 1453577568,
    "path" : "~/Documents/Chris Documents/papers/General/R quick tour/chapman-sawtooth2015-RQuickTour.Rpres",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 8,
    "source_on_save" : false,
    "type" : "r_presentation"
}