{
    "contents" : "R for Marketing Research and Analytics\n========================================================\nAuthor: Chris Chapman and Elea McDonnell Feit\nDate: January 2016\ncss: ../chapman-feit-slides.css\nwidth: 1024\nheight: 768\n\n**Chapter 5: Differences Between Groups**  \n\nWebsite for all data files:  \n[http://r-marketing.r-forge.r-project.org/data.html](http://r-marketing.r-forge.r-project.org/data.html)\n\n\n\nLoad Segmentation/Subscription data\n========\nAs usual, check the book for details on the data simulation. For now:\n```{r}\nseg.df <- read.csv(\"http://goo.gl/qw303p\")\nsummary(seg.df)\n```\n\n\nQuick Language Digression: for()\n========\n```{r}\nfor (i in 1:10) { print(i) }\n```\nAdvanced R programmers often avoid **for()** ... but if it makes sense to you\nthen go ahead and use it!\n\n\nIntegers are not required, just a sequence\n=========\n```{r}\ni.seq <- seq(from=2.1, to=6.2, by=0.65)\nfor (i in i.seq ) { print(i) }\nfor (i in c(5, 4, 3, 5, 3, 0, -100, 10)) { cat(i, \" \") }\nfor (i in c(\"Hello \",\"world, \",\"welcome to R!\")) { cat(i) }\n```\nSee book for tips on for() and the importance of seq_along()!\n\n\nif()\n========\n**if()** is used for basic program flow control. \n\n**if(A) B else C** means:  \n\"If A is true, compute B [which may be any commands inside {}], otherwise compute C.\"\n\n```{r}\nx <- 2\nif (x > 0) {\n  print (\"Positive!\")\n} else {\n  print (\"Zero or negative!\")\n}\n```\nRules of brackets are confusing, so simplify: always use **{** and **}** !\n\n**else C** is optional. If !A and no C block, nothing will occur.\n\n\nifelse()\n========\n**ifelse()** is a vectorized version of if(). Use it to *create a vector* using logic, \n*not* to control program flow.\n```{r}\nx <- -2:2\n\nif (x > 0) {      # bad code -- only tests once!\n  \"pos\"\n} else { \n  \"neg/zero\"\n}\n```\nThe correct way to do this is:\n```{r}\nifelse(x > 0, \"pos\", \"neg/zero\")\n```\nInstead of simply getting values as the result, you could perform actions \n(e.g., by calling functions to do something).\n\n\n\nDescriptives: Selecting by group\n========\n```{r}\nmean(seg.df$income[seg.df$Segment == \"Moving up\"])\nmean(seg.df$income[seg.df$Segment == \"Moving up\" & \n                   seg.df$subscribe==\"subNo\"])\n```\nThis quickly gets tedious!\n\n\nDescriptives: apply a function by group\n========\n**by**(VARIABLE of interest, GROUPING variable, FUNCTION)\n```{r}\nby(seg.df$income, seg.df$Segment, mean)\n```\nUse list() to have more than one grouping variable:\n```{r}\nby(seg.df$income, list(seg.df$Segment, seg.df$subscribe), mean)\n```\n\nAggregate: use a formula!\n========\nBreak out *income by segment*, in data \"*seg.df*\", computing the *mean*:\n```{r}\naggregate(income ~ Segment, data=seg.df, mean)\n```\n\nThis extends easily to multiple dimensions:\n```{r}\naggregate(income ~ Segment + ownHome, data=seg.df, mean)\n```\n\nAggregate returns a data frame\n========\n```{r}\nagg.data <- aggregate(income ~ Segment + ownHome, \n                      data=seg.df, mean)\nstr(agg.data)\nagg.data[2, ]\nagg.data[2, 3]\n```\n\n\nTables\n========\nA table counts occurrences of a single value, such as one level of a factor.\n\n\n```{r}\ntable(seg.df$Segment, seg.df$ownHome)\n```\nTelling R to use *seg.df* for everything is easy with **with()**:\n```{r}\nwith(seg.df, table(Segment, ownHome))\n```\nNote that table() uses R standard *(X, Y)* == *Row, Column* order.\n\nprop.table()\n========\nGet proportions for a table by wrapping **table()** with **prop.table()**:\n```{r}\nwith(seg.df, prop.table(table(Segment, ownHome)))\n```\n\nThe default computes full table proportions. Obtain marginal proportions by \nspecifying rows (*margin=1*) or columns (*margin=2*):\n```{r}\nwith(seg.df, prop.table(table(Segment, ownHome), margin=1))\n```\n\n\nDoing math in a table\n========\n**aggregate()** can be used to apply a function to data, computing the \nresult within with each group.  \n\nFor instance, to add up the total number of kids in each segment, use *sum*:\n```{r}\naggregate(kids ~ Segment, data=seg.df, sum)\n```\n\n\n\n17898/13\n\n\n#### visualize counts by group\n\n\nlibrary(lattice)\n\n\n# histogram by 1 factor\nhistogram(~subscribe | Segment, data=seg.df)\n\n# counts instead of proportions, and some visual options\nhistogram(~subscribe | Segment, data=seg.df, type=\"count\", \n          layout=c(4,1), col=c(\"burlywood\", \"darkolivegreen\"))\n\n\n# histogram by 2 factors\nhistogram(~subscribe | Segment + ownHome, data=seg.df)\n\n# use prop.table to get just positive proportion\nprop.table(table(seg.df$subscribe, seg.df$Segment), margin=2)\n\nbarchart(prop.table(table(seg.df$subscribe, seg.df$Segment), margin=2)[2, ], \n          xlab=\"Subscriber proportion by Segment\", col=\"darkolivegreen\")\n\n\n\n#### visualize continuous data by group\n\n## bar chart for continuous variable, the \"spreadsheet\" way to graph it\n# aggregate our data\nseg.mean <- aggregate(income ~ Segment, data=seg.df, mean)\n# plot it\nlibrary(lattice)\n\nbarchart(income~Segment, data=seg.mean, col=\"grey\")\n\nseg.income.agg <- aggregate(income ~ Segment + ownHome, data=seg.df, mean)\n# then plot it\nbarchart(income ~ Segment, data=seg.income.agg, \n         groups=ownHome, auto.key=TRUE,\n         par.settings = simpleTheme(col=c(\"gray95\", \"gray50\"))   # try rainbow, topo.colors, heat.colors, cm.colors\n)\n\n\n## better = boxplot for continuous variable\n\n# base graphics way to do this\n\nboxplot(income ~ Segment, data=seg.df, yaxt=\"n\", ylab=\"Income ($k)\")\nax.seq <- seq(from=0, to=120000, by=20000)\naxis(side=2, at=ax.seq, labels=paste(ax.seq/1000, \"k\", sep=\"\"), las=1)\n\n\n# lattice gives more options, especially for multiway breakouts (\"conditioning\")\nlibrary(lattice)\n\nbwplot(Segment ~ income, data=seg.df, horizontal=TRUE, xlab = \"Income\")\n\n# add conditioning variable\nbwplot(Segment ~ income | ownHome, data=seg.df, horizontal=TRUE, \n       xlab=\"Income\")\n\n\n\n\n\n\n\n\n\n\n\n\n\nWhy R?\n========================================================\n\nFor more details on authoring R presentations click the\n**Help** button on the toolbar.\n\n- Bullet 1\n- Bullet 2\n- Bullet 3\n\n\n\n\n\n\n\n\n\n\n\n\n\nTemplate slides follow, for copy & paste\n========================================================\ntype: alert\n\n\nBullet slide\n========================================================\n\nFor more details on authoring R presentations click the\n**Help** button on the toolbar.\n\n- Bullet 1\n- Bullet 2\n- Bullet 3\n\n\nSlide With Code\n========================================================\n\n```{r}\nsummary(cars)\n```\n\n\nSlide With Plot\n========================================================\n\n```{r, echo=FALSE}\nplot(cars)\n```\n",
    "created" : 1450661850500.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3510151872",
    "id" : "595C9A3E",
    "lastKnownWriteTime" : 1453491476,
    "path" : "~/Documents/Chris Documents/papers/repos/RIntroBook/Instructor/Chapter5/Chapter5-ChapmanFeit.Rpres",
    "project_path" : "Chapter5/Chapter5-ChapmanFeit.Rpres",
    "properties" : {
    },
    "relative_order" : 8,
    "source_on_save" : false,
    "type" : "r_presentation"
}