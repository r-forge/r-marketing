{
    "data" : [
        "\n             \ngcp.screened0 i ain't got a clue i am not sure i am unsure i can't remember i d k i d8nt know\n        FALSE                  1             2           3                3     2           1\n        TRUE                   0             0           0                0     0           0\n             \ngcp.screened0 i didn't know the answer i dk i do not care i do not know i do not know the exact name\n        FALSE                        1    6             1            33                            1",
        "\n        TRUE                         0    0             0             0                            0\n             \ngcp.screened0 i do not know what you are talking about i do not now i do not use their website i don't\n        FALSE                                        1            1                          1       1\n        TRUE                                         0            0                          0       0\n             \ngcp.screened0 i don't 5 i don't care i don't k n o w i don't know i don't know amazon prime",
        "\n        FALSE         1           14               1         1141                         1\n        TRUE          0            0               0            1                         0\n             \ngcp.screened0 i don't know and i don't care i don't know anything about that\n        FALSE                             2                                1\n        TRUE                              0                                0\n             \ngcp.screened0 i don't know anything about the cloud i don't know dropbox",
        " i don't know i have no idea\n        FALSE                                     1                    1                           1\n        TRUE                                      0                    0                           0\n             \ngcp.screened0 i don't know or ca i don't know well\n        FALSE                  1                 1\n        TRUE                   0                 0\n             \ngcp.screened0 i don't know what youre talking about i just want to play a game\n        FALSE                                                                1",
        "\n        TRUE                                                                 0\n             \ngcp.screened0 i don't like forced survey i don't no i don't nw i don't remember i don't use amazon\n        FALSE                          1          1          1                1                  1\n        TRUE                           0          0          0                0                  0\n             \ngcp.screened0 i dont no i doubt know i dun care i dunno  i f i forget i forgot i give up i hate amazon\n        FALSE",
        "         3            1          1       4    1        1        1         1             1\n        TRUE          0            0          0       0    0        0        0         0             0\n             \ngcp.screened0 i hate surveys i have never heard of it i have no clue i have no idea\n        FALSE              1                        1             11             56\n        TRUE               0                        0              0              0\n             \ngcp.screened0 i have no idea i know nothing about it",
        " i have not heard of this i'd one kne  i'm\n        FALSE                                      1                        1           1    1\n        TRUE                                       0                        0           0    0\n             \ngcp.screened0 i'm not sure i've never heard of it ibutt   ic iceberg icloud  idc  idd  idj  idk idk bruh\n        FALSE           14                      1     1    1       1    160    2    1    6  712        1\n        TRUE             0                      0     0",
        "    0       0      0    0    0    0    3        0\n             \ngcp.screened0  idn idrive  ifk   ii illegal government activities indigo infrastructure as a solution\n        FALSE    1      1    1    1                             1      1                            1\n        TRUE     0      0    0    0                             0      0                            0\n             \ngcp.screened0 instant instant video internet wares for sale iono  ios   ip ipad iphone  irk irrelevant\n        FALSE       4             1",
        "                       1    1    3    1    3      3    2          1\n        TRUE        0             0                       0    0    0    0    0      0    0          0\n             \ngcp.screened0   is  isk  iso   it itunes iunno iwatch    j j town jack jake je ne sais pas jene jenga\n        FALSE    1    3    1    3      1     1      1   18      1    1    1              2    1     1\n        TRUE     0    0    0    0      0     0      0    0      0    0    0              0    0     0\n             \ngcp.screened0",
        " jesus i don't know   jh jibber  jim jim b jingle   jj   jk  jkh  joe joe momma jomama\n        FALSE                  1    1      1    1     1      1    4    1    1    1         1      1\n        TRUE                   0    0      0    0     0      0    0    0    0    0         0      0\n             \ngcp.screened0 jones juju jungle junk    k kadabra kaid katie kendal kendle kick kindle kindle cloud\n        FALSE     1    1      2    3   16       1    1     1      1      1    1    136            4\n        TRUE ",
        "     0    0      0    0    0       0    0     0      0      0    0      1            0\n             \ngcp.screened0 kindle fire kindles kindly king   kk   kl knook know know idea   ko kool    l lab126 labie\n        FALSE          10       1      1    1    3    2     1    1         1    1    1    4      1     1\n        TRUE            0       0      0    0    0    0     0    0         0    0    0    0      0     0\n             \ngcp.screened0 lakeisha lame lamewad larry lashes lemon lime lenox   li library line",
        " linux live   lk   ll\n        FALSE        1    1       1     1      1          1     1    1       1    3     4    1    1    2\n        TRUE         0    0       0     0      0          0     0    0       0    0     0    0    0    0\n             \ngcp.screened0  lll   lo loadofshit locker lone lono loser louis love    m m2m not sure macro magic\n        FALSE    1    2          1      1    1    1     1     1    3   10            1     1     1\n        TRUE     0    0          0      0    0    0     0     0    0",
        "    1            0     0     0\n             \ngcp.screened0 mamacloud mccloud   me mechanical turk  meh mello merkin michelle microsoft mike mike hunt\n        FALSE         1       1    1               2    1     1      1        1         1    1         1\n        TRUE          0       0    0               0    0     0      0        0         0    0         0\n             \ngcp.screened0 mine   mn   mo molly  mom money monkey  mot mother mount olympus mouse   mr  mud mush\n        FALSE    1    1    1     1    1",
        "     2      1    1      1             1     1    1    1    1\n        TRUE     0    0    0     0    0     0      0    0      0             0     0    0    0    0\n             \ngcp.screened0 mushroom my but my cloud my dick    n  n a   na nada  nah negative  net network\n        FALSE        1      1        3       1   15   42   97    1    1        1    1       1\n        TRUE         0      0        0       0    0    0    0    0    0        0    0       0\n             \ngcp.screened0 never heard of it never used amazon",
        " next   ni nice nile nimbus  nin   nj   nn  nnn   no\n        FALSE                 1                 1    3    3    1    1      2    1    1    2    5   88\n        TRUE                  0                 0    0    0    0    0      0    0    0    0    0    1\n             \ngcp.screened0 no answer no c no clue no clue don't even know what a cloud is no clue itis no ide no idea\n        FALSE         1    1     151                                       1            1      1     559\n        TRUE          0    0       0",
        "                                       0            0      0       0\n             \ngcp.screened0 no idea and i have an android no idea do not use amazon no idea hate amazon by the way\n        FALSE                             1                         1                              1\n        TRUE                              0                         0                              0\n             \ngcp.screened0 no idea maybe amazon fire no idea the cloud no idea what's a cloud\n        FALSE                         1",
        "                 1                      1\n        TRUE                          0                 0                      0\n             \ngcp.screened0 no idea you annoying freak no ideas no not know no se no sure noid  non non extinct\n        FALSE                          1        1           1     2       2    1    3           1\n        TRUE                           0        0           0     0       0    0    0           0\n             \ngcp.screened0 nonclue none nonoo  noo noodle nook nope nopro not a clue",
        " not a damn clue not know\n        FALSE       1   36     1    1      1    4    3     1         10               1        1\n        TRUE        0    0     0    0      0    0    0     0          0               0        0\n             \ngcp.screened0 not sure not sure exactly not sure only moonlight as it in engineering office not y note\n        FALSE      207                1                                                   1     1    1\n        TRUE         1                0                                                   0",
        "     0    0\n             \ngcp.screened0 nothing now prime null nuts    o oatmeal  one onedrive onenote  ooo open openbox  opp   or\n        FALSE       6         1    1    1   14       1    1        4       1    2    1       1    1    1\n        TRUE        0         0    0    0    1       0    0        0       0    0    0       0    0    0\n             \ngcp.screened0 orine   os otto    p page by patch peach pegasus  pen penelope penishead photics pictures\n        FALSE     1    2    1    5       0     1     1",
        "       1    1        1         1       1        1\n        TRUE      0    0    0    0       1     0     0       0    0        0         0       0        0\n             \ngcp.screened0 pinga play plex plumb poo grab poop farts poop on a stick poop u  pop popp porn possum\n        FALSE     1    2    1     1        1          1               1      1    1    1    1      1\n        TRUE      0    0    0     0        0          0               0      0    0    0    0      0\n             \ngcp.screened0 post dispatch",
        " pound sand   pp prie prime prime cloud primer prin prine product products\n        FALSE             1          1    1    1   285           3      1    1     3       2        3\n        TRUE              0          0    0    0     0           0      0    0     0       1        0\n             \ngcp.screened0 project expedition prome puff puff diddy puffy pulse puppy purple    q\n        FALSE                  1     1    3          0     1     1     1      1    3\n        TRUE                   0     0    0          1",
        "     0     0     0      1    0\n             \ngcp.screened0 quack quack goes the duck quest question or wonder\n        FALSE                         1     1                  1\n        TRUE                          0     0                  0\n             \ngcp.screened0 quit asking questions these are annoying    r rain rain cloud raindrops\n        FALSE                                        1   10    9          2         1\n        TRUE                                         0    0    0          0         0\n",
        "             \ngcp.screened0 rainforest condensation rat baby  raw really red river redshift  ret rip em off river roku\n        FALSE                       1        1    1      1         1        2    2          1     3    1\n        TRUE                        0        0    0      0         0        0    0          0     0    0\n             \ngcp.screened0   rr rumpelstiltskin    s   s3 s3 cloud sadf safari sales school screw you kyle   sd  sdf\n        FALSE    1               1    7   26        1    2      1",
        "     1      1              1    1    1\n        TRUE     0               0    0    2        0    0      0     0      0              0    0    0\n             \ngcp.screened0  se3 sela selling seriously go google it yourself server server farm service service cloud\n        FALSE    1    1       1                               1      1           1       2             1\n        TRUE     0    0       0                               0      0           0       0             0\n             \ngcp.screened0 services   sh",
        " shannon share shazam  she shigella shove it shut up silk silver lining\n        FALSE        2    1       1     1      1    1        1        1       1    7             1\n        TRUE         0    0       0     0      0    0        0        0       0    0             0\n             \ngcp.screened0 simpledb skip  sky sky cloud sky pilot skydrive smart smart fart smartcloud smile snake\n        FALSE        1    1   10         2         1        1     1          1          1     1     1\n        TRUE         0    0",
        "    0         0         0        0     0          0          0     0     0\n             \ngcp.screened0 snake in the grass soft software some acronym something something like c3\n        FALSE                  1    2        2            1         3                 1\n        TRUE                   0    0        0            0         0                 0\n             \ngcp.screened0 sorry do not know sorry i don't know  sos soundcloud soup spyware sr something   ss  sss\n        FALSE                 1                  1",
        "    1          3    1       1            1    1    4\n        TRUE                  0                  0    0          0    0       0            0    0    0\n             \ngcp.screened0 steaming steph stet stolen data r us stop stop with the questions storage store storm\n        FALSE        1     1    1                1    1                       1       3     1     2\n        TRUE         0     0    0                0    0                       0       0     0     0\n             \ngcp.screened0 streaming stuff",
        " stupid stupid period successful orders suckit suckmyassthroughmydickhole\n        FALSE         1     9      3             1                 1      1                          1\n        TRUE          0     0      1             0                 0      0                          0\n             \ngcp.screened0 super super cool awesome services sure surface swag sweg sync    t  tab taco taylor\n        FALSE     1                           1    4       1    1    1    2   10    1    1      1\n        TRUE      0                           0",
        "    0       0    0    0    0    0    0    0      0\n             \ngcp.screened0 technology terp test   th the best the blah blah blah the cloud the pen15 club\n        FALSE          1    1    3    1        1                  1        50              1\n        TRUE           0    0    0    0        0                  0         0              0\n             \ngcp.screened0 the rainforest the ring the servers are distributed among multiple datacenters\n        FALSE              1        1                                                      0",
        "\n        TRUE               0        0                                                      1\n             \ngcp.screened0 they have a bigger clouds thingy thor thunder thursday tiger  tim tits   to  too tornado\n        FALSE                         1      1    2       1        1     1    1    2    2    1       1\n        TRUE                          0      0    0       0        0     0    1    0    0    0       0\n             \ngcp.screened0 tralala trash  tre tree tree sanctuary   tt turd turd bucket turtle",
        " tuss   ty    u   uh\n        FALSE       1     1    1    1              1    2    1           1      2    1    2    4    2\n        TRUE        0     0    0    0              0    0    0           0      0    0    0    0    0\n             \ngcp.screened0  uii ultraviolet  umm ummm unaware  unk unkn unknown unsur unsure  usk    v verom\n        FALSE    1           1    1    1       1   12    1     106     1     23    1    3     1\n        TRUE     0           0    0    0       0    0    0       0     0      0    0",
        "    0     0\n             \ngcp.screened0 virtual private cloud voicemail vs in an feb warthogs  was wasn't aware water watermelon\n        FALSE                     1         1            1        1    2            1     1          1\n        TRUE                      0         0            0        0    0            0     0          0\n             \ngcp.screened0 wave  web web services web services cloudfront westworld what what is a cloud\n        FALSE    1    1           16                       1         1    3",
        "               1\n        TRUE     0    0            1                       0         0    0               0\n             \ngcp.screened0 what the hell is cloud computing  whf whisperjet whispernet whispersync white cloud  who\n        FALSE                                1    1          1          3           2           1    2\n        TRUE                                 0    0          0          0           0           0    0\n             \ngcp.screened0 who ares who cares who cares really who knows who the heck knows this stuff",
        " whos amazon\n        FALSE        1        22                1        20                             1           1\n        TRUE         0         0                0         0                             0           0\n             \ngcp.screened0 whymustdailyjournalhavesuchaworthlessfuckingwebsite windows windows 8 workdocs  wow    x\n        FALSE                                                   1       2         1        1    2   18\n        TRUE                                                    0       0         0",
        "        0    0    0\n             \ngcp.screened0   xc   xx    y ya ma  yep  yes   yo  you you stink your guess is as good as mine your mom\n        FALSE    2    7    7     1    1   10    1    3         1                             1        1\n        TRUE     0    0    1     0    0    0    0    0         0                             0        0\n             \ngcp.screened0 your survey blows  yuk   yy    z zebra zelda zero zippy zon cloud zona zone zontom zoom\n        FALSE                 1    2    2    7     2",
        "     1    1     1         1    1    1      1    1\n        TRUE                  0    0    0    0     0     0    0     0         0    0    0      0    0\n             \ngcp.screened0 zudung zune\n        FALSE      1    2\n        TRUE       0    0\n",
        "> ",
        "table(gcp.clean$amzn.rawtext[gcp.screened0])",
        "\n                                                   abc \n                                                     1 \n                                                   acs \n                                                     1 \n                                          amazon cloud \n                                                     4 \n                                 amazon cloud services \n                                                     1 \n                                        amazon elastic \n                                                     1 ",
        "\n                          amazon elastic compute cloud \n                                                     1 \n                                    amazon web service \n                                                     1 \n                                   amazon web services \n                                                    10 \n                               amazon web services aws \n                                                     1 \n                                             amazonaws \n                                                     1 ",
        "\n                                                 apple \n                                                     1 \n                                                   aws \n                                                    37 \n                                aws and s3 for storage \n                                                     1 \n                                                 azure \n                                                     2 \n                                 because it saves info \n                                                     1 ",
        "\n                                                butter \n                                                     1 \n                                                 cloud \n                                                     3 \n                                         cloudy amazon \n                                                     1 \n                                               compute \n                                                     1 \n                                            don't know \n                                                     3 ",
        "\n                                               dont no \n                                                     1 \n                                                    ec \n                                                     1 \n                                                   ec2 \n                                                     5 \n                                                   ecs \n                                                     1 \n                                                    ee \n                                                     1 ",
        "\n                                       elastic compute \n                                                     1 \n                                                     f \n                                                     3 \n                                                  fire \n                                                     1 \n                                                    ft \n                                                     1 \n                                                google \n                                                     1 ",
        "\n                                                     h \n                                                     1 \n                                                horses \n                                                     1 \n                                          i don't know \n                                                     1 \n                                                   idk \n                                                     3 \n                                                kindle \n                                                     1 ",
        "\n                                                     m \n                                                     1 \n                                                    no \n                                                     1 \n                                              not sure \n                                                     1 \n                                                     o \n                                                     1 \n                                               page by \n                                                     1 ",
        "\n                                               product \n                                                     1 \n                                            puff diddy \n                                                     1 \n                                                purple \n                                                     1 \n                                                    s3 \n                                                     2 \n                                                stupid \n                                                     1 ",
        "\nthe servers are distributed among multiple datacenters \n                                                     1 \n                                                   tim \n                                                     1 \n                                          web services \n                                                     1 \n                                                     y \n                                                     1 \n",
        "> ",
        "sort(table(gcp.clean$amzn.rawtext[gcp.screened0]))",
        "\n                                                   abc \n                                                     1 \n                                                   acs \n                                                     1 \n                                 amazon cloud services \n                                                     1 \n                                        amazon elastic \n                                                     1 \n                          amazon elastic compute cloud \n                                                     1 ",
        "\n                                    amazon web service \n                                                     1 \n                               amazon web services aws \n                                                     1 \n                                             amazonaws \n                                                     1 \n                                                 apple \n                                                     1 \n                                aws and s3 for storage \n                                                     1 ",
        "\n                                 because it saves info \n                                                     1 \n                                                butter \n                                                     1 \n                                         cloudy amazon \n                                                     1 \n                                               compute \n                                                     1 \n                                               dont no \n                                                     1 ",
        "\n                                                    ec \n                                                     1 \n                                                   ecs \n                                                     1 \n                                                    ee \n                                                     1 \n                                       elastic compute \n                                                     1 \n                                                  fire \n                                                     1 ",
        "\n                                                    ft \n                                                     1 \n                                                google \n                                                     1 \n                                                     h \n                                                     1 \n                                                horses \n                                                     1 \n                                          i don't know \n                                                     1 ",
        "\n                                                kindle \n                                                     1 \n                                                     m \n                                                     1 \n                                                    no \n                                                     1 \n                                              not sure \n                                                     1 \n                                                     o \n                                                     1 ",
        "\n                                               page by \n                                                     1 \n                                               product \n                                                     1 \n                                            puff diddy \n                                                     1 \n                                                purple \n                                                     1 \n                                                stupid \n                                                     1 ",
        "\nthe servers are distributed among multiple datacenters \n                                                     1 \n                                                   tim \n                                                     1 \n                                          web services \n                                                     1 \n                                                     y \n                                                     1 \n                                                 azure \n                                                     2 ",
        "\n                                                    s3 \n                                                     2 \n                                                 cloud \n                                                     3 \n                                            don't know \n                                                     3 \n                                                     f \n                                                     3 \n                                                   idk \n                                                     3 ",
        "\n                                          amazon cloud \n                                                     4 \n                                                   ec2 \n                                                     5 \n                                   amazon web services \n                                                    10 \n                                                   aws \n                                                    37 \n",
        "> ",
        "30500 * 6",
        "[1] 183000\n",
        "> ",
        "3965*6",
        "[1] 23790\n",
        "> ",
        "(2757+200)*6",
        "[1] 17742\n",
        "> ",
        "5100+765+469",
        "[1] 6334\n",
        "> ",
        "install.packages(\"Rcmdr\")",
        "Installing package into ‘/Users/cchapman/Library/R/3.2/library’\n(as ‘lib’ is unspecified)\n",
        "also installing the dependencies ‘e1071’, ‘readxl’, ‘RcmdrMisc’, ‘tcltk2’\n\n",
        "  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n\r  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0",
        "\r  2  730k    2 15861 ",
        "   0     0  29893      0  0:00:25",
        " --:--:--  0:00:25 29870",
        "\r100  730k  100  730k    0     0   798k   ",
        "   0 --:--:-- --:--:-- --:--:--  797k\n",
        "  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n\r  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0",
        "\r  2  722k    2 ",
        "16384    0     0  27214      0  0:0",
        "0:27 --:--:--  0:00:27 27215",
        "\r100  722k  1",
        "00  722k    0     0   718k   ",
        "   0  0:00:01  0:00:01 --:-",
        "-:--  719k\n",
        "  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n\r  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0",
        "\r 54  101k   54 56928    0     0   101k  ",
        "    0  0:00:01 --:--:--  0:00:01  101",
        "k",
        "\r100  101k  100  101k    0     0   168k      0 --:--:-- --:--:-- --:--:--  168k\n",
        "  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed",
        "\n\r  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0",
        "\r 22  855k  ",
        " 22  194k    0     0   207k",
        "    ",
        "  0",
        "  0:",
        "00:04 ",
        "--:-",
        "-:-",
        "-  0:00:04  20",
        "7k",
        "\r100  855k  10",
        "0  855k    0     0   ",
        "483k      0 ",
        " 0:00:01  ",
        "0:00:01 --:--:--  483k\n",
        "  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload ",
        " ",
        " Total   Spent    Left  Speed\n\r  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0",
        "\r  0     0    0",
        "     0    0     0      0      0 --",
        ":--:-",
        "-",
        " --:--:-- --:--:--     0",
        "\r  7 5324k    7  415k    0     0  ",
        " 362k      0  0:00:14  0:00:01  0:",
        "00:13  362k",
        "\r 32 5324k   ",
        "32 1743k    0     0 ",
        "  81",
        "4k      0  0:00:0",
        "6  0:00:",
        "02 ",
        " 0:00:04  814k",
        "\r 78 ",
        "5324k   78 4175k    0     0",
        "  1328k      0  0:00:04  0:",
        "00:03  0:00:01 1328k",
        "\r100 5324k  100 5324k    0     0 ",
        " 1548k      0  0:00:03  0:00:03 ",
        "--:--:-- 1547k\n",
        "\nThe downloaded binary packages are in\n\t/var/folders/00/16mm8000h01000cxqpysvccm004tkj/T//Rtmp4EmTce/downloaded_packages\n",
        "> ",
        "library(\"Rcmdr\")",
        "Loading required package: splines\n",
        "Loading required package: RcmdrMisc\n",
        "Loading required package: car\n",
        "Loading required package: sandwich\n",
        "xcrun: error: invalid active developer path (/Library/Developer/CommandLineTools), missing xcrun at: /Library/Developer/CommandLineTools/usr/bin/xcrun\n",
        "also installing the dependencies ‘XLConnectJars’, ‘rJava’\n\n",
        "  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n\r  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0",
        "\r  0 12.3M    0    ",
        " 0    0     0      0      0 --:--:-- --:--:-- --:--:--     0",
        "\r 17 12.3M   1",
        "7 2257k    0     0",
        "  1653k      0  ",
        "0:00:07  0:00:01  ",
        "0:00:06",
        " 1653k",
        "\r 50 12.3M   ",
        "50 6353k    0     0  2697k      0",
        "  0:00:04  0:00:",
        "02  0:00:02 2697k",
        "\r 84 12.3M   84 10.4M    0     0  3",
        "174k      0  0:00:03  0:00:03 --",
        ":--:-- 3174k",
        "\r100 12.3M  100 12.",
        "3M    0     0  3357k      0  0:00:03  0:00:03 --:--:-- 3357k\n",
        "  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n\r  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0",
        "\r 15  594k   15 92",
        "13",
        "6    0 ",
        "    0   14",
        "9k     ",
        " 0  0:",
        "00:03 --:--:--  0:",
        "00:03  ",
        "149",
        "k",
        "\r100  594k  1",
        "00  594k    0     0   510k  ",
        "  ",
        "  0  ",
        "0:00:01",
        "  0:00:",
        "01 -",
        "-:--:--  510k\n",
        "  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                      ",
        "           Dload  Upload   Total   Spent    Left  Speed\n\r  0     0    0     0    0     0      0      0 --:-",
        "-:-- --:--:-- --",
        ":--:--     0",
        "\r  0 4863k    0     0   ",
        " 0     0      0      0 --:--:-- --:--:-- --:--",
        ":--  ",
        "  ",
        " ",
        "0",
        "\r 13 4863k  ",
        " 13  667k    0     0   485k",
        "    ",
        "  0  ",
        "0:00:10  0:00:01",
        "  0:",
        "00:09 ",
        " 484k",
        "\r 41 4863k   41 202",
        "7k    0     0   852k      0  0:00:05  0:00:02  0:00:03  852k",
        "\r 89 4863k   ",
        "89 4363k    0     0  1289k",
        "      ",
        "0  0:00:03  ",
        "0:00",
        ":03 --",
        ":--:-- 1289k",
        "\r100 4863k  100 4863k    0     0  ",
        "1374k      0  0:00:03  0:00:03 ",
        "-",
        "-:--:-- 1374k\n",
        "  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n        ",
        "                         Dload  ",
        "Upload   Total   Spent    Left  Speed\n\r  0     0    0     0  ",
        "  0     0      0      0 --:--:-- --:--:-- --:--:--     0",
        "\r 12 4026k   12  51",
        "2k    0     0   634k      0  0:00:0",
        "6 ",
        "--:--:--  0:00:06  63",
        "3k",
        "\r 96 4026k   96 3872",
        "k    0     0  2148k      0  0:00:01  0:00:",
        "01 --:--:-- 2147k",
        "\r100 4026k  100 4026k    0     0 ",
        " 2183k      0  0:00:01  0:00:01 --:--:-",
        "- ",
        "2183k\n",
        "  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n",
        "\r  0     0    ",
        "0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0",
        "\r100 64626  100 64626    0     0 ",
        "  111k      0 --:--:-- --:--:-- --:--:",
        "--  111k\n",
        "  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload ",
        " Upload   Total   Spent    Left  Speed\n\r  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0",
        "\r  0     0    0     0    0     0      0      0 --:-",
        "-:-- --:--:-- --:--:--     0",
        "\r 10 3084k   10 ",
        " 335k    0     0   249k",
        "     ",
        " 0 ",
        " 0:0",
        "0:12  0:",
        "00:",
        "01  ",
        "0:00:11 ",
        " 249",
        "k",
        "\r 96 3084k   96 2991k",
        "    0     0  1271k      0  0:0",
        "0:02 ",
        " 0:00:02",
        " --:--:-- 1271k",
        "\r100 3084k  100 3084k    ",
        "0     0  1301k      0  0:00:02",
        "  0:0",
        "0:0",
        "2 --:-",
        "-:--",
        " 13",
        "00k",
        "\n",
        "\nThe downloaded binary packages are in\n\t/var/folders/00/16mm8000h01000cxqpysvccm004tkj/T//Rtmp4EmTce/downloaded_packages\nRcmdrMsg: [1] NOTE: R Commander Version 2.2-3: Fri Jan 22 13:43:42 2016\n",
        "\nRcmdr Version 2.2-3\n\n",
        "Warning message:\n",
        "running command ''/usr/bin/otool' -L '/Library/Frameworks/R.framework/Resources/library/tcltk/libs//tcltk.so'' had status 1 \n",
        "> ",
        "satData <- read.csv(\"http://r-marketing.r-forge.r-project.org/data/rintro-chapter2.csv\")",
        "> ",
        "str(satData)",
        "'data.frame':\t500 obs. of  5 variables:\n $ iProdSAT : int  6 4 5 3 3 4 4 5 4 4 ...\n $ iSalesSAT: int  2 5 3 3 3 4 3 1 4 2 ...\n $ Segment  : int  1 3 4 2 3 4 1 3 3 3 ...\n $ iProdREC : int  4 4 5 4 2 5 4 3 4 2 ...\n $ iSalesREC: int  3 4 4 4 2 4 2 3 1 2 ...\n",
        "> ",
        "semPaths(sat.fit, what=\"est\", nCharNodes=9, residuals=FALSE)",
        "Error: could not find function \"semPaths\"\n",
        "> ",
        "library(lavaan)",
        "This is lavaan 0.5-18\n",
        "lavaan is BETA software! Please report any bugs.\n",
        "> ",
        "sat.fit <- cfa(satModel, data=satData)",
        "Error in lavaan::lavaan(model = satModel, data = satData, model.type = \"cfa\",  : \n  object 'satModel' not found\n",
        "> ",
        "satModel <- \"SAT =~ iProdSAT + iSalesSAT",
        "+ ",
        "REC =~ iProdREC + iSalesREC",
        "+ ",
        "REC ~  SAT \"",
        "> ",
        "# fit the structural model",
        "> ",
        "library(lavaan)",
        "> ",
        "sat.fit <- cfa(satModel, data=satData)",
        "Found more than one class \"Model\" in cache; using the first, from namespace 'MatrixModels'\n",
        "> ",
        "# plot the structural model",
        "> ",
        "library(semPlot)",
        "Warning:",
        " replacing previous import by 'visNetwork::%>%' when loading 'DiagrammeR'\n",
        "> ",
        "semPaths(sat.fit, what=\"est\", nCharNodes=9, residuals=FALSE)",
        "> ",
        "str(satData)",
        "'data.frame':\t500 obs. of  5 variables:\n $ iProdSAT : int  6 4 5 3 3 4 4 5 4 4 ...\n $ iSalesSAT: int  2 5 3 3 3 4 3 1 4 2 ...\n $ Segment  : int  1 3 4 2 3 4 1 3 3 3 ...\n $ iProdREC : int  4 4 5 4 2 5 4 3 4 2 ...\n $ iSalesREC: int  3 4 4 4 2 4 2 3 1 2 ...\n",
        "> ",
        "summary(satData)",
        "    iProdSAT      iSalesSAT        Segment         iProdREC       iSalesREC    \n Min.   :1.00   Min.   :1.000   Min.   :1.000   Min.   :1.000   Min.   :1.000  \n 1st Qu.:3.00   1st Qu.:3.000   1st Qu.:2.000   1st Qu.:3.000   1st Qu.:3.000  \n Median :4.00   Median :4.000   Median :3.000   Median :4.000   Median :3.000  \n Mean   :4.13   Mean   :3.802   Mean   :2.844   Mean   :4.044   Mean   :3.444  \n 3rd Qu.:5.00   3rd Qu.:5.000   3rd Qu.:4.000   3rd Qu.:5.000   3rd Qu.:4.000  \n Max.   :7.00   Max.   :7.000   Max.   :4.000  ",
        " Max.   :7.000   Max.   :7.000  \n",
        "> ",
        "satData$Segment <- factor(satData$Segment)",
        "> ",
        "summary(satData)",
        "    iProdSAT      iSalesSAT     Segment    iProdREC       iSalesREC    \n Min.   :1.00   Min.   :1.000   1: 54   Min.   :1.000   Min.   :1.000  \n 1st Qu.:3.00   1st Qu.:3.000   2:131   1st Qu.:3.000   1st Qu.:3.000  \n Median :4.00   Median :4.000   3:154   Median :4.000   Median :3.000  \n Mean   :4.13   Mean   :3.802   4:161   Mean   :4.044   Mean   :3.444  \n 3rd Qu.:5.00   3rd Qu.:5.000           3rd Qu.:5.000   3rd Qu.:4.000  \n Max.   :7.00   Max.   :7.000           Max.   :7.000   Max.   :7.000  \n",
        "> ",
        "by(satData$iProdSAT, satData$Segment, quantile)",
        "satData$Segment: 1\n  0%  25%  50%  75% 100% \n   1    3    3    4    6 \n--------------------------------------------------------------------------------------- \nsatData$Segment: 2\n  0%  25%  50%  75% 100% \n   1    3    4    4    6 \n--------------------------------------------------------------------------------------- \nsatData$Segment: 3\n  0%  25%  50%  75% 100% \n   2    4    4    5    7 \n--------------------------------------------------------------------------------------- \nsatData$Segment: 4\n  0%  25%  50% ",
        " 75% 100% \n   3    4    5    5    7 \n",
        "> ",
        "fivenum",
        "function (x, na.rm = TRUE) \n{\n    xna <- is.na(x)\n    if (any(xna)) {\n        if (na.rm) \n            x <- x[!xna]\n        else return(rep.int(NA, 5))\n    }\n    x <- sort(x)\n    n <- length(x)\n    if (n == 0) \n        rep.int(NA, 5)\n    else {\n        n4 <- floor((n + 3)/2)/2\n        d <- c(1, n4, (n + 1)/2, n + 1 - n4, n)\n        0.5 * (x[floor(d)] + x[ceiling(d)])\n    }\n}\n<bytecode: 0x11c947920>\n<environment: namespace:stats>\n",
        "> ",
        "by(satData$iProdSAT, satData$Segment, fivenum)",
        "satData$Segment: 1\n[1] 1 3 3 4 6\n--------------------------------------------------------------------------------------- \nsatData$Segment: 2\n[1] 1 3 4 4 6\n--------------------------------------------------------------------------------------- \nsatData$Segment: 3\n[1] 2 4 4 5 7\n--------------------------------------------------------------------------------------- \nsatData$Segment: 4\n[1] 3 4 5 5 7\n",
        "> ",
        "library(corrplot)",
        "> ",
        "corrplot(satData[ , -3])",
        "Error in matrix(unlist(value, recursive = FALSE, use.names = FALSE), nrow = nr,  : \n  length of 'dimnames' [2] not equal to array extent\n",
        "> ",
        "corrplot(cor(satData[ , -3]))",
        "> ",
        "?\"corrplot\"",
        "> ",
        "corrplot.mixed(cor(satData[ , -3]))",
        "> ",
        "?aggregate",
        "> ",
        "prod.sat.seg <- aggregate(satData$iProdSAT, satData$Segment, quantile)",
        "Error in aggregate.data.frame(as.data.frame(x), ...) : \n  'by' must be a list\n",
        "> ",
        "prod.sat.seg <- aggregate(satData$iProdSAT, list(satData$Segment), quantile)",
        "> ",
        "prod.sat.seg",
        "  Group.1 x.0% x.25% x.50% x.75% x.100%\n1       1    1     3     3     4      6\n2       2    1     3     4     4      6\n3       3    2     4     4     5      7\n4       4    3     4     5     5      7\n",
        "> ",
        "p <- ggplot(data=prod.sat.seg,",
        "+ ",
        "aes(x=Group.1, y=x.50%, ymax=x.75%, ymin=x.25%))",
        "Error: unexpected ',' in:\n\"p <- ggplot(data=prod.sat.seg,\naes(x=Group.1, y=x.50%, ymax=x.75%,\"\n",
        "> ",
        "names(prod.sat.seg) <- c(\"Segment\", \"pct0\", \"pct25\", \"pct50\", \"pct75\", \"pct100\")",
        "Error in names(prod.sat.seg) <- c(\"Segment\", \"pct0\", \"pct25\", \"pct50\",  : \n  'names' attribute [6] must be the same length as the vector [2]\n",
        "> ",
        "names(prod.sat.seg)",
        "[1] \"Group.1\" \"x\"      \n",
        "> ",
        "prod.sat.seg <- aggregate(satData$iProdSAT, list(satData$Segment), quantile)",
        "> ",
        "prod.sat.seg",
        "  Group.1 x.0% x.25% x.50% x.75% x.100%\n1       1    1     3     3     4      6\n2       2    1     3     4     4      6\n3       3    2     4     4     5      7\n4       4    3     4     5     5      7\n",
        "> ",
        "names(prod.sat.seg)",
        "[1] \"Group.1\" \"x\"      \n",
        "> ",
        "str(prod.sat.seg)",
        "'data.frame':\t4 obs. of  2 variables:\n $ Group.1: Factor w/ 4 levels \"1\",\"2\",\"3\",\"4\": 1 2 3 4\n $ x      : num [1:4, 1:5] 1 1 2 3 3 3 4 4 3 4 ...\n  ..- attr(*, \"dimnames\")=List of 2\n  .. ..$ : NULL\n  .. ..$ : chr  \"0%\" \"25%\" \"50%\" \"75%\" ...\n",
        "> ",
        "aggregate(satData$iProdSAT, list(satData$Segment), quantile)",
        "  Group.1 x.0% x.25% x.50% x.75% x.100%\n1       1    1     3     3     4      6\n2       2    1     3     4     4      6\n3       3    2     4     4     5      7\n4       4    3     4     5     5      7\n",
        "> ",
        "unlist(aggregate(satData$iProdSAT, list(satData$Segment), quantile))",
        "Group.11 Group.12 Group.13 Group.14       x1       x2       x3       x4       x5       x6       x7 \n       1        2        3        4        1        1        2        3        3        3        4 \n      x8       x9      x10      x11      x12      x13      x14      x15      x16      x17      x18 \n       4        3        4        4        5        4        4        5        5        6        6 \n     x19      x20 \n       7        7 \n",
        "> ",
        "(aggregate(satData$iProdSAT, list(satData$Segment), unlist(quantile)))",
        "  Group.1 x.0% x.25% x.50% x.75% x.100%\n1       1    1     3     3     4      6\n2       2    1     3     4     4      6\n3       3    2     4     4     5      7\n4       4    3     4     5     5      7\n",
        "> ",
        "str(aggregate(satData$iProdSAT, list(satData$Segment), unlist(quantile)))",
        "'data.frame':\t4 obs. of  2 variables:\n $ Group.1: Factor w/ 4 levels \"1\",\"2\",\"3\",\"4\": 1 2 3 4\n $ x      : num [1:4, 1:5] 1 1 2 3 3 3 4 4 3 4 ...\n  ..- attr(*, \"dimnames\")=List of 2\n  .. ..$ : NULL\n  .. ..$ : chr  \"0%\" \"25%\" \"50%\" \"75%\" ...\n",
        "> ",
        "cbind(prod.sat.seg$Group.1, prod.sat.seg$x)",
        "       0% 25% 50% 75% 100%\n[1,] 1  1   3   3   4    6\n[2,] 2  1   3   4   4    6\n[3,] 3  2   4   4   5    7\n[4,] 4  3   4   5   5    7\n",
        "> ",
        "prod.sat.seg <- cbind(prod.sat.seg$Group.1, prod.sat.seg$x)",
        "> ",
        "names(prod.sat.seg) <- c(\"Segment\", \"pct0\", \"pct25\", \"pct50\", \"pct75\", \"pct100\")",
        "> ",
        "prod.sat.seg",
        "       0% 25% 50% 75% 100%\n[1,] 1  1   3   3   4    6\n[2,] 2  1   3   4   4    6\n[3,] 3  2   4   4   5    7\n[4,] 4  3   4   5   5    7\nattr(,\"names\")\n [1] \"Segment\" \"pct0\"    \"pct25\"   \"pct50\"   \"pct75\"   \"pct100\"  NA        NA        NA        NA       \n[11] NA        NA        NA        NA        NA        NA        NA        NA        NA        NA       \n[21] NA        NA        NA        NA       \n",
        "> ",
        "prod.sat.seg <- aggregate(satData$iProdSAT, list(satData$Segment), quantile)",
        "> ",
        "str(prod.sat.seg)",
        "'data.frame':\t4 obs. of  2 variables:\n $ Group.1: Factor w/ 4 levels \"1\",\"2\",\"3\",\"4\": 1 2 3 4\n $ x      : num [1:4, 1:5] 1 1 2 3 3 3 4 4 3 4 ...\n  ..- attr(*, \"dimnames\")=List of 2\n  .. ..$ : NULL\n  .. ..$ : chr  \"0%\" \"25%\" \"50%\" \"75%\" ...\n",
        "> ",
        "prod.sat.seg <- cbind(prod.sat.seg$Group.1, prod.sat.seg$x)",
        "> ",
        "str(prod.sat.seg)",
        " num [1:4, 1:6] 1 2 3 4 1 1 2 3 3 3 ...\n - attr(*, \"dimnames\")=List of 2\n  ..$ : NULL\n  ..$ : chr [1:6] \"\" \"0%\" \"25%\" \"50%\" ...\n",
        "> ",
        "colnames(prod.sat.seg)",
        "[1] \"\"     \"0%\"   \"25%\"  \"50%\"  \"75%\"  \"100%\"\n",
        "> ",
        "prod.sat.seg <- aggregate(satData$iProdSAT, list(satData$Segment), quantile)",
        "> ",
        "str(prod.sat.seg)",
        "'data.frame':\t4 obs. of  2 variables:\n $ Group.1: Factor w/ 4 levels \"1\",\"2\",\"3\",\"4\": 1 2 3 4\n $ x      : num [1:4, 1:5] 1 1 2 3 3 3 4 4 3 4 ...\n  ..- attr(*, \"dimnames\")=List of 2\n  .. ..$ : NULL\n  .. ..$ : chr  \"0%\" \"25%\" \"50%\" \"75%\" ...\n",
        "> ",
        "prod.sat.seg <- data.frame(prod.sat.seg$Group.1, prod.sat.seg$x)",
        "> ",
        "str(prod.sat.seg)",
        "'data.frame':\t4 obs. of  6 variables:\n $ prod.sat.seg.Group.1: Factor w/ 4 levels \"1\",\"2\",\"3\",\"4\": 1 2 3 4\n $ X0.                 : num  1 1 2 3\n $ X25.                : num  3 3 4 4\n $ X50.                : num  3 4 4 5\n $ X75.                : num  4 4 5 5\n $ X100.               : num  6 6 7 7\n",
        "> ",
        "names(prod.sat.seg) <- c(\"Segment\", \"pct0\", \"pct25\", \"pct50\", \"pct75\", \"pct100\")",
        "> ",
        "prod.sat.seg",
        "  Segment pct0 pct25 pct50 pct75 pct100\n1       1    1     3     3     4      6\n2       2    1     3     4     4      6\n3       3    2     4     4     5      7\n4       4    3     4     5     5      7\n",
        "> ",
        "prod.sat.seg <- aggregate(satData$iProdSAT, list(satData$Segment), quantile)",
        "> ",
        "str(prod.sat.seg)",
        "'data.frame':\t4 obs. of  2 variables:\n $ Group.1: Factor w/ 4 levels \"1\",\"2\",\"3\",\"4\": 1 2 3 4\n $ x      : num [1:4, 1:5] 1 1 2 3 3 3 4 4 3 4 ...\n  ..- attr(*, \"dimnames\")=List of 2\n  .. ..$ : NULL\n  .. ..$ : chr  \"0%\" \"25%\" \"50%\" \"75%\" ...\n",
        "> ",
        "prod.sat.seg <- data.frame(prod.sat.seg$Group.1, prod.sat.seg$x)",
        "> ",
        "prod.sat.seg",
        "  prod.sat.seg.Group.1 X0. X25. X50. X75. X100.\n1                    1   1    3    3    4     6\n2                    2   1    3    4    4     6\n3                    3   2    4    4    5     7\n4                    4   3    4    5    5     7\n",
        "> ",
        "names(prod.sat.seg) <- c(\"Segment\", \"pct0\", \"pct25\", \"pct50\", \"pct75\", \"pct100\")",
        "> ",
        "prod.sat.seg",
        "  Segment pct0 pct25 pct50 pct75 pct100\n1       1    1     3     3     4      6\n2       2    1     3     4     4      6\n3       3    2     4     4     5      7\n4       4    3     4     5     5      7\n",
        "> ",
        "p <- ggplot(data=prod.sat.seg,",
        "+ ",
        "aes(x=Segment, y=pct50, ymax=pct75, ymin=pct25))",
        "Error: could not find function \"ggplot\"\n",
        "> ",
        "library(ggplot2)",
        "> ",
        "p <- ggplot(data=prod.sat.seg,",
        "+ ",
        "aes(x=Segment, y=pct50, ymax=pct75, ymin=pct25))",
        "> ",
        "p",
        "Error: No layers in plot\n",
        "> ",
        "p <- ggplot(data=prod.sat.seg,",
        "+ ",
        "aes(x=Segment, y=pct50, ymax=pct75, ymin=pct25)) +",
        "+ ",
        "geom_point() +",
        "+ ",
        "geom_errorbar()",
        "> ",
        "p",
        "> ",
        "library(ggplot2)",
        "> ",
        "by(satData$iProdSAT, satData$Segment, mean_se)",
        "satData$Segment: 1\n         y     ymin     ymax\n1 3.462963 3.318867 3.607059\n------------------------------------------------------------------------------ \nsatData$Segment: 2\n         y     ymin     ymax\n1 3.725191 3.639824 3.810558\n------------------------------------------------------------------------------ \nsatData$Segment: 3\n         y    ymin     ymax\n1 4.103896 4.02192 4.185872\n------------------------------------------------------------------------------ \nsatData$Segment: 4\n         y     ymin     ymax",
        "\n1 4.708075 4.630936 4.785213\n",
        "> ",
        "prod.sat.seg <- aggregate(satData$iProdSAT, list(satData$Segment), mean_se)",
        "> ",
        "str(prod.sat.seg)",
        "'data.frame':\t4 obs. of  2 variables:\n $ Group.1: Factor w/ 4 levels \"1\",\"2\",\"3\",\"4\": 1 2 3 4\n $ x      :List of 12\n  ..$ : num 3.46\n  ..$ : num 3.73\n  ..$ : num 4.1\n  ..$ : num 4.71\n  ..$ : num 3.32\n  ..$ : num 3.64\n  ..$ : num 4.02\n  ..$ : num 4.63\n  ..$ : num 3.61\n  ..$ : num 3.81\n  ..$ : num 4.19\n  ..$ : num 4.79\n  ..- attr(*, \"dim\")= int  4 3\n  ..- attr(*, \"dimnames\")=List of 2\n  .. ..$ : NULL\n  .. ..$ : chr  \"y\" \"ymin\" \"ymax\"\n",
        "> ",
        "prod.sat.seg <- data.frame(prod.sat.seg$Group.1, prod.sat.seg$x)",
        "> ",
        "prod.sat.seg",
        "  prod.sat.seg.Group.1        y     ymin     ymax\n1                    1 3.462963 3.318867 3.607059\n2                    2 3.725191 3.639824 3.810558\n3                    3 4.103896  4.02192 4.185872\n4                    4 4.708075 4.630936 4.785213\n",
        "> ",
        "names(prod.sat.seg) <- c(\"Segment\", \"mean\", \"lowerCI\", \"upperCI\")",
        "> ",
        "prod.sat.seg",
        "  Segment     mean  lowerCI  upperCI\n1       1 3.462963 3.318867 3.607059\n2       2 3.725191 3.639824 3.810558\n3       3 4.103896  4.02192 4.185872\n4       4 4.708075 4.630936 4.785213\n",
        "> ",
        "p <- ggplot(data=prod.sat.seg,",
        "+ ",
        "aes(x=Segment, y=mean, ymax=upperCI, ymin=lowerCI)) +",
        "+ ",
        "geom_point() +",
        "+ ",
        "geom_errorbar()",
        "> ",
        "p",
        "Don't know how to automatically pick scale for object of type list. Defaulting to continuous\n",
        "Error: geom_point requires the following missing aesthetics: y\n",
        "> ",
        "p <- ggplot(data=prod.sat.seg,",
        "+ ",
        "aes(x=Segment, y=mean, ymax=upperCI, ymin=lowerCI)) +",
        "+ ",
        "geom_point(y=y) +",
        "+ ",
        "geom_errorbar()",
        "Error in do.call(\"layer\", list(mapping = mapping, data = data, stat = stat,  : \n  object 'y' not found\n",
        "> ",
        "p <- ggplot(data=prod.sat.seg,",
        "+ ",
        "aes(x=Segment, y=mean, ymax=upperCI, ymin=lowerCI)) +",
        "+ ",
        "geom_point(y=mean) +",
        "+ ",
        "geom_errorbar()",
        "> ",
        "p",
        "Don't know how to automatically pick scale for object of type list. Defaulting to continuous\n",
        "Error in is.unit(y) : object 'y' not found\n",
        "> ",
        "prod.sat.seg",
        "  Segment     mean  lowerCI  upperCI\n1       1 3.462963 3.318867 3.607059\n2       2 3.725191 3.639824 3.810558\n3       3 4.103896  4.02192 4.185872\n4       4 4.708075 4.630936 4.785213\n",
        "> ",
        "names(prod.sat.seg) <- c(\"Segment\", \"average\", \"lowerCI\", \"upperCI\")",
        "> ",
        "prod.sat.seg",
        "  Segment  average  lowerCI  upperCI\n1       1 3.462963 3.318867 3.607059\n2       2 3.725191 3.639824 3.810558\n3       3 4.103896  4.02192 4.185872\n4       4 4.708075 4.630936 4.785213\n",
        "> ",
        "p <- ggplot(data=prod.sat.seg,",
        "+ ",
        "aes(x=Segment, y=average, ymax=upperCI, ymin=lowerCI)) +",
        "+ ",
        "geom_point() +",
        "+ ",
        "geom_errorbar()",
        "> ",
        "p",
        "Don't know how to automatically pick scale for object of type list. Defaulting to continuous\n",
        "Error: geom_point requires the following missing aesthetics: y\n",
        "> ",
        "str(prod.sat.seg)",
        "'data.frame':\t4 obs. of  4 variables:\n $ Segment: Factor w/ 4 levels \"1\",\"2\",\"3\",\"4\": 1 2 3 4\n $ average:List of 4\n  ..$ : num 3.46\n  ..$ : num 3.73\n  ..$ : num 4.1\n  ..$ : num 4.71\n $ lowerCI:List of 4\n  ..$ : num 3.32\n  ..$ : num 3.64\n  ..$ : num 4.02\n  ..$ : num 4.63\n $ upperCI:List of 4\n  ..$ : num 3.61\n  ..$ : num 3.81\n  ..$ : num 4.19\n  ..$ : num 4.79\n",
        "> ",
        "prod.sat.seg <- aggregate(satData$iProdSAT, list(satData$Segment), mean_se)",
        "> ",
        "str(prod.sat.seg)",
        "'data.frame':\t4 obs. of  2 variables:\n $ Group.1: Factor w/ 4 levels \"1\",\"2\",\"3\",\"4\": 1 2 3 4\n $ x      :List of 12\n  ..$ : num 3.46\n  ..$ : num 3.73\n  ..$ : num 4.1\n  ..$ : num 4.71\n  ..$ : num 3.32\n  ..$ : num 3.64\n  ..$ : num 4.02\n  ..$ : num 4.63\n  ..$ : num 3.61\n  ..$ : num 3.81\n  ..$ : num 4.19\n  ..$ : num 4.79\n  ..- attr(*, \"dim\")= int  4 3\n  ..- attr(*, \"dimnames\")=List of 2\n  .. ..$ : NULL\n  .. ..$ : chr  \"y\" \"ymin\" \"ymax\"\n",
        "> ",
        "data.frame(prod.sat.seg$Group.1, unlist(prod.sat.seg$x))",
        "   prod.sat.seg.Group.1 unlist.prod.sat.seg.x.\n1                     1               3.462963\n2                     2               3.725191\n3                     3               4.103896\n4                     4               4.708075\n5                     1               3.318867\n6                     2               3.639824\n7                     3               4.021920\n8                     4               4.630936\n9                     1               3.607059\n10                    2               3.810558",
        "\n11                    3               4.185872\n12                    4               4.785213\n",
        "> ",
        "str(prod.sat.seg)",
        "'data.frame':\t4 obs. of  2 variables:\n $ Group.1: Factor w/ 4 levels \"1\",\"2\",\"3\",\"4\": 1 2 3 4\n $ x      :List of 12\n  ..$ : num 3.46\n  ..$ : num 3.73\n  ..$ : num 4.1\n  ..$ : num 4.71\n  ..$ : num 3.32\n  ..$ : num 3.64\n  ..$ : num 4.02\n  ..$ : num 4.63\n  ..$ : num 3.61\n  ..$ : num 3.81\n  ..$ : num 4.19\n  ..$ : num 4.79\n  ..- attr(*, \"dim\")= int  4 3\n  ..- attr(*, \"dimnames\")=List of 2\n  .. ..$ : NULL\n  .. ..$ : chr  \"y\" \"ymin\" \"ymax\"\n",
        "> ",
        "data.frame(prod.sat.seg$x)",
        "         y     ymin     ymax\n1 3.462963 3.318867 3.607059\n2 3.725191 3.639824 3.810558\n3 4.103896  4.02192 4.185872\n4 4.708075 4.630936 4.785213\n",
        "> ",
        "str(data.frame(prod.sat.seg$x))",
        "'data.frame':\t4 obs. of  3 variables:\n $ y   :List of 4\n  ..$ : num 3.46\n  ..$ : num 3.73\n  ..$ : num 4.1\n  ..$ : num 4.71\n $ ymin:List of 4\n  ..$ : num 3.32\n  ..$ : num 3.64\n  ..$ : num 4.02\n  ..$ : num 4.63\n $ ymax:List of 4\n  ..$ : num 3.61\n  ..$ : num 3.81\n  ..$ : num 4.19\n  ..$ : num 4.79\n",
        "> ",
        "?mean_se",
        "> ",
        "by(satData$iProdSAT, satData$Segment, stat_summary)",
        "Error in get(x, envir = this, inherits = inh)(this, ...) : \n  Mapping should be a list of unevaluated mappings created by aes or aes_string\n",
        "> ",
        "by(satData$iProdSAT, satData$Segment, mean_se, mult=1.96)",
        "satData$Segment: 1\n         y     ymin     ymax\n1 3.462963 3.180534 3.745392\n------------------------------------------------------------------------------ \nsatData$Segment: 2\n         y     ymin    ymax\n1 3.725191 3.557871 3.89251\n------------------------------------------------------------------------------ \nsatData$Segment: 3\n         y     ymin     ymax\n1 4.103896 3.943223 4.264569\n------------------------------------------------------------------------------ \nsatData$Segment: 4\n         y     ymin     ymax",
        "\n1 4.708075 4.556884 4.859265\n",
        "> ",
        "by(satData$iProdSAT, satData$Segment, mean_se, mult=1)",
        "satData$Segment: 1\n         y     ymin     ymax\n1 3.462963 3.318867 3.607059\n------------------------------------------------------------------------------ \nsatData$Segment: 2\n         y     ymin     ymax\n1 3.725191 3.639824 3.810558\n------------------------------------------------------------------------------ \nsatData$Segment: 3\n         y    ymin     ymax\n1 4.103896 4.02192 4.185872\n------------------------------------------------------------------------------ \nsatData$Segment: 4\n         y     ymin     ymax",
        "\n1 4.708075 4.630936 4.785213\n",
        "> ",
        "by(satData$iProdSAT, satData$Segment, mean_se, mult=1.96)",
        "satData$Segment: 1\n         y     ymin     ymax\n1 3.462963 3.180534 3.745392\n------------------------------------------------------------------------------ \nsatData$Segment: 2\n         y     ymin    ymax\n1 3.725191 3.557871 3.89251\n------------------------------------------------------------------------------ \nsatData$Segment: 3\n         y     ymin     ymax\n1 4.103896 3.943223 4.264569\n------------------------------------------------------------------------------ \nsatData$Segment: 4\n         y     ymin     ymax",
        "\n1 4.708075 4.556884 4.859265\n",
        "> ",
        "prod.sat.seg <- aggregate(satData$iProdSAT, list(satData$Segment), mean_se, mult=1.96)",
        "> ",
        "str(prod.sat.seg)",
        "'data.frame':\t4 obs. of  2 variables:\n $ Group.1: Factor w/ 4 levels \"1\",\"2\",\"3\",\"4\": 1 2 3 4\n $ x      :List of 12\n  ..$ : num 3.46\n  ..$ : num 3.73\n  ..$ : num 4.1\n  ..$ : num 4.71\n  ..$ : num 3.18\n  ..$ : num 3.56\n  ..$ : num 3.94\n  ..$ : num 4.56\n  ..$ : num 3.75\n  ..$ : num 3.89\n  ..$ : num 4.26\n  ..$ : num 4.86\n  ..- attr(*, \"dim\")= int  4 3\n  ..- attr(*, \"dimnames\")=List of 2\n  .. ..$ : NULL\n  .. ..$ : chr  \"y\" \"ymin\" \"ymax\"\n",
        "> ",
        "data.frame(prod.sat.seg$x)",
        "         y     ymin     ymax\n1 3.462963 3.180534 3.745392\n2 3.725191 3.557871  3.89251\n3 4.103896 3.943223 4.264569\n4 4.708075 4.556884 4.859265\n",
        "> ",
        "data.frame(prod.sat.seg$Group.1, data.frame(prod.sat.seg$x))",
        "  prod.sat.seg.Group.1        y     ymin     ymax\n1                    1 3.462963 3.180534 3.745392\n2                    2 3.725191 3.557871  3.89251\n3                    3 4.103896 3.943223 4.264569\n4                    4 4.708075 4.556884 4.859265\n",
        "> ",
        "str(data.frame(prod.sat.seg$Group.1, data.frame(prod.sat.seg$x)))",
        "'data.frame':\t4 obs. of  4 variables:\n $ prod.sat.seg.Group.1: Factor w/ 4 levels \"1\",\"2\",\"3\",\"4\": 1 2 3 4\n $ y                   :List of 4\n  ..$ : num 3.46\n  ..$ : num 3.73\n  ..$ : num 4.1\n  ..$ : num 4.71\n $ ymin                :List of 4\n  ..$ : num 3.18\n  ..$ : num 3.56\n  ..$ : num 3.94\n  ..$ : num 4.56\n $ ymax                :List of 4\n  ..$ : num 3.75\n  ..$ : num 3.89\n  ..$ : num 4.26\n  ..$ : num 4.86\n",
        "> ",
        "data.frame(prod.sat.seg$Group.1, as.data.frame(prod.sat.seg$x))",
        "  prod.sat.seg.Group.1        y     ymin     ymax\n1                    1 3.462963 3.180534 3.745392\n2                    2 3.725191 3.557871  3.89251\n3                    3 4.103896 3.943223 4.264569\n4                    4 4.708075 4.556884 4.859265\n",
        "> ",
        "str(data.frame(prod.sat.seg$Group.1, as.data.frame(prod.sat.seg$x)))",
        "'data.frame':\t4 obs. of  4 variables:\n $ prod.sat.seg.Group.1: Factor w/ 4 levels \"1\",\"2\",\"3\",\"4\": 1 2 3 4\n $ y                   :List of 4\n  ..$ : num 3.46\n  ..$ : num 3.73\n  ..$ : num 4.1\n  ..$ : num 4.71\n $ ymin                :List of 4\n  ..$ : num 3.18\n  ..$ : num 3.56\n  ..$ : num 3.94\n  ..$ : num 4.56\n $ ymax                :List of 4\n  ..$ : num 3.75\n  ..$ : num 3.89\n  ..$ : num 4.26\n  ..$ : num 4.86\n",
        "> ",
        "data.frame(prod.sat.seg$Group.1, unlist(prod.sat.seg$x))",
        "   prod.sat.seg.Group.1 unlist.prod.sat.seg.x.\n1                     1               3.462963\n2                     2               3.725191\n3                     3               4.103896\n4                     4               4.708075\n5                     1               3.180534\n6                     2               3.557871\n7                     3               3.943223\n8                     4               4.556884\n9                     1               3.745392\n10                    2               3.892510",
        "\n11                    3               4.264569\n12                    4               4.859265\n",
        "> ",
        "data.frame(prod.sat.seg$Group.1, unlist(prod.sat.seg$x), nrow=4)",
        "   prod.sat.seg.Group.1 unlist.prod.sat.seg.x. nrow\n1                     1               3.462963    4\n2                     2               3.725191    4\n3                     3               4.103896    4\n4                     4               4.708075    4\n5                     1               3.180534    4\n6                     2               3.557871    4\n7                     3               3.943223    4\n8                     4               4.556884    4\n9                     1               3.745392",
        "    4\n10                    2               3.892510    4\n11                    3               4.264569    4\n12                    4               4.859265    4\n",
        "> ",
        "as.matrix(prod.sat.seg$x, nrow=4)",
        "     y        ymin     ymax    \n[1,] 3.462963 3.180534 3.745392\n[2,] 3.725191 3.557871 3.89251 \n[3,] 4.103896 3.943223 4.264569\n[4,] 4.708075 4.556884 4.859265\n",
        "> ",
        "data.frame(prod.sat.seg$Group.1, as.matrix(prod.sat.seg$x, nrow=4))",
        "  prod.sat.seg.Group.1        y     ymin     ymax\n1                    1 3.462963 3.180534 3.745392\n2                    2 3.725191 3.557871  3.89251\n3                    3 4.103896 3.943223 4.264569\n4                    4 4.708075 4.556884 4.859265\n",
        "> ",
        "str(data.frame(prod.sat.seg$Group.1, as.matrix(prod.sat.seg$x, nrow=4)))",
        "'data.frame':\t4 obs. of  4 variables:\n $ prod.sat.seg.Group.1: Factor w/ 4 levels \"1\",\"2\",\"3\",\"4\": 1 2 3 4\n $ y                   :List of 4\n  ..$ : num 3.46\n  ..$ : num 3.73\n  ..$ : num 4.1\n  ..$ : num 4.71\n $ ymin                :List of 4\n  ..$ : num 3.18\n  ..$ : num 3.56\n  ..$ : num 3.94\n  ..$ : num 4.56\n $ ymax                :List of 4\n  ..$ : num 3.75\n  ..$ : num 3.89\n  ..$ : num 4.26\n  ..$ : num 4.86\n",
        "> ",
        "cbind(prod.sat.seg$Group.1, as.matrix(prod.sat.seg$x, nrow=4)",
        "+ ",
        ")",
        "       y        ymin     ymax    \n[1,] 1 3.462963 3.180534 3.745392\n[2,] 2 3.725191 3.557871 3.89251 \n[3,] 3 4.103896 3.943223 4.264569\n[4,] 4 4.708075 4.556884 4.859265\n",
        "> ",
        "str(cbind(prod.sat.seg$Group.1, as.matrix(prod.sat.seg$x, nrow=4)))",
        "List of 16\n $ : int 1\n $ : int 2\n $ : int 3\n $ : int 4\n $ : num 3.46\n $ : num 3.73\n $ : num 4.1\n $ : num 4.71\n $ : num 3.18\n $ : num 3.56\n $ : num 3.94\n $ : num 4.56\n $ : num 3.75\n $ : num 3.89\n $ : num 4.26\n $ : num 4.86\n - attr(*, \"dim\")= int [1:2] 4 4\n - attr(*, \"dimnames\")=List of 2\n  ..$ : NULL\n  ..$ : chr [1:4] \"\" \"y\" \"ymin\" \"ymax\"\n",
        "> ",
        "data.frame(cbind(prod.sat.seg$Group.1, as.matrix(prod.sat.seg$x, nrow=4)))",
        "  V1        y     ymin     ymax\n1  1 3.462963 3.180534 3.745392\n2  2 3.725191 3.557871  3.89251\n3  3 4.103896 3.943223 4.264569\n4  4 4.708075 4.556884 4.859265\n",
        "> ",
        "str(data.frame(cbind(prod.sat.seg$Group.1, as.matrix(prod.sat.seg$x, nrow=4))))",
        "'data.frame':\t4 obs. of  4 variables:\n $ V1  :List of 4\n  ..$ : int 1\n  ..$ : int 2\n  ..$ : int 3\n  ..$ : int 4\n $ y   :List of 4\n  ..$ : num 3.46\n  ..$ : num 3.73\n  ..$ : num 4.1\n  ..$ : num 4.71\n $ ymin:List of 4\n  ..$ : num 3.18\n  ..$ : num 3.56\n  ..$ : num 3.94\n  ..$ : num 4.56\n $ ymax:List of 4\n  ..$ : num 3.75\n  ..$ : num 3.89\n  ..$ : num 4.26\n  ..$ : num 4.86\n",
        "> ",
        "?data.frame",
        "> ",
        "prod.sat.seg$x",
        "     y        ymin     ymax    \n[1,] 3.462963 3.180534 3.745392\n[2,] 3.725191 3.557871 3.89251 \n[3,] 4.103896 3.943223 4.264569\n[4,] 4.708075 4.556884 4.859265\n",
        "> ",
        "as.data.frame(prod.sat.seg$x)",
        "         y     ymin     ymax\n1 3.462963 3.180534 3.745392\n2 3.725191 3.557871  3.89251\n3 4.103896 3.943223 4.264569\n4 4.708075 4.556884 4.859265\n",
        "> ",
        "str(as.data.frame(prod.sat.seg$x))",
        "'data.frame':\t4 obs. of  3 variables:\n $ y   :List of 4\n  ..$ : num 3.46\n  ..$ : num 3.73\n  ..$ : num 4.1\n  ..$ : num 4.71\n $ ymin:List of 4\n  ..$ : num 3.18\n  ..$ : num 3.56\n  ..$ : num 3.94\n  ..$ : num 4.56\n $ ymax:List of 4\n  ..$ : num 3.75\n  ..$ : num 3.89\n  ..$ : num 4.26\n  ..$ : num 4.86\n",
        "> ",
        "str(as.data.frame(prod.sat.seg$x))",
        "'data.frame':\t4 obs. of  3 variables:\n $ y   :List of 4\n  ..$ : num 3.46\n  ..$ : num 3.73\n  ..$ : num 4.1\n  ..$ : num 4.71\n $ ymin:List of 4\n  ..$ : num 3.18\n  ..$ : num 3.56\n  ..$ : num 3.94\n  ..$ : num 4.56\n $ ymax:List of 4\n  ..$ : num 3.75\n  ..$ : num 3.89\n  ..$ : num 4.26\n  ..$ : num 4.86\n",
        "> ",
        "str(lapply(as.data.frame(prod.sat.seg$x), unlist))",
        "List of 3\n $ y   : num [1:4] 3.46 3.73 4.1 4.71\n $ ymin: num [1:4] 3.18 3.56 3.94 4.56\n $ ymax: num [1:4] 3.75 3.89 4.26 4.86\n",
        "> ",
        "data.frame(lapply(as.data.frame(prod.sat.seg$x), unlist))",
        "         y     ymin     ymax\n1 3.462963 3.180534 3.745392\n2 3.725191 3.557871 3.892510\n3 4.103896 3.943223 4.264569\n4 4.708075 4.556884 4.859265\n",
        "> ",
        "str(data.frame(lapply(as.data.frame(prod.sat.seg$x), unlist)))",
        "'data.frame':\t4 obs. of  3 variables:\n $ y   : num  3.46 3.73 4.1 4.71\n $ ymin: num  3.18 3.56 3.94 4.56\n $ ymax: num  3.75 3.89 4.26 4.86\n",
        "> ",
        "data.frame(prod.sat.seg$Group.1, lapply(data.frame(prod.sat.seg$x), unlist))",
        "  prod.sat.seg.Group.1        y     ymin     ymax\n1                    1 3.462963 3.180534 3.745392\n2                    2 3.725191 3.557871 3.892510\n3                    3 4.103896 3.943223 4.264569\n4                    4 4.708075 4.556884 4.859265\n",
        "> ",
        "str(data.frame(prod.sat.seg$Group.1, lapply(data.frame(prod.sat.seg$x), unlist)))",
        "'data.frame':\t4 obs. of  4 variables:\n $ prod.sat.seg.Group.1: Factor w/ 4 levels \"1\",\"2\",\"3\",\"4\": 1 2 3 4\n $ y                   : num  3.46 3.73 4.1 4.71\n $ ymin                : num  3.18 3.56 3.94 4.56\n $ ymax                : num  3.75 3.89 4.26 4.86\n",
        "> ",
        "prod.sat.seg <- data.frame(prod.sat.seg$Group.1, lapply(data.frame(prod.sat.seg$x), unlist))",
        "> ",
        "prod.sat.seg",
        "  prod.sat.seg.Group.1        y     ymin     ymax\n1                    1 3.462963 3.180534 3.745392\n2                    2 3.725191 3.557871 3.892510\n3                    3 4.103896 3.943223 4.264569\n4                    4 4.708075 4.556884 4.859265\n",
        "> ",
        "names(prod.sat.seg) <- c(\"Segment\", \"average\", \"lowerCI\", \"upperCI\")",
        "> ",
        "prod.sat.seg",
        "  Segment  average  lowerCI  upperCI\n1       1 3.462963 3.180534 3.745392\n2       2 3.725191 3.557871 3.892510\n3       3 4.103896 3.943223 4.264569\n4       4 4.708075 4.556884 4.859265\n",
        "> ",
        "p <- ggplot(data=prod.sat.seg,",
        "+ ",
        "aes(x=Segment, y=average, ymax=upperCI, ymin=lowerCI)) +",
        "+ ",
        "geom_point() +",
        "+ ",
        "geom_errorbar()",
        "> ",
        "p",
        "> ",
        "p <- p + geom_point(color=Segment, size=3)",
        "Error in do.call(\"layer\", list(mapping = mapping, data = data, stat = stat,  : \n  object 'Segment' not found\n",
        "> ",
        "p",
        "> ",
        "p <- p + geom_point(aes(color=Segment, size=3))",
        "> ",
        "p",
        "> ",
        "p <- p + geom_point(aes(color=Segment), size=3)",
        "> ",
        "p",
        "> ",
        "p <- ggplot(data=prod.sat.seg,",
        "+ ",
        "aes(x=Segment, y=average, ymax=upperCI, ymin=lowerCI)) +",
        "+ ",
        "geom_point() +",
        "+ ",
        "geom_errorbar()",
        "> ",
        "p",
        "> ",
        "p <- p + geom_point(aes(color=Segment), size=3)",
        "> ",
        "p",
        "> ",
        "p <- p + geom_errorbar(aes(color=Segment), size=3)",
        "> ",
        "p",
        "> ",
        "p <- ggplot(data=prod.sat.seg, ",
        "+ ",
        "            aes(x=Segment, y=average, ymax=upperCI, ymin=lowerCI)) +",
        "+ ",
        "     geom_point() +",
        "+ ",
        "     geom_errorbar()",
        "> ",
        "p <- p + geom_point(aes(color=Segment), size=3)",
        "> ",
        "p <- p + geom_errorbar(aes(color=Segment))",
        "> ",
        "p",
        "> ",
        "p <- p + geom_errorbar(aes(color=Segment), width=0.5)",
        "> ",
        "p",
        "> ",
        "?geom_errorbar",
        "> ",
        "p <- ggplot(data=prod.sat.seg, ",
        "+ ",
        "            aes(x=Segment, y=average, ymax=upperCI, ymin=lowerCI)) +",
        "+ ",
        "     geom_point() +",
        "+ ",
        "     geom_errorbar()",
        "> ",
        "",
        "> ",
        "p <- p + geom_point(aes(color=Segment), size=3) ",
        "> ",
        "",
        "> ",
        "p <- p + geom_errorbar(aes(color=Segment), width=0.5)",
        "> ",
        "p",
        "> ",
        "p <- ggplot(data=prod.sat.seg, ",
        "+ ",
        "            aes(x=Segment, y=average, ymax=upperCI, ymin=lowerCI)) +",
        "+ ",
        "     geom_point() +",
        "+ ",
        "     geom_errorbar()",
        "> ",
        "",
        "> ",
        "p",
        "> ",
        "p <- ggplot(data=prod.sat.seg,",
        "+ ",
        "aes(x=Segment, y=average, ymax=upperCI, ymin=lowerCI)) +",
        "+ ",
        "geom_point(aes(color=Segment), size=3) +",
        "+ ",
        "geom_errorbar()",
        "> ",
        "p",
        "> ",
        "p <- ggplot(data=prod.sat.seg, ",
        "+ ",
        "            aes(x=Segment, y=average, ymax=upperCI, ymin=lowerCI)) +",
        "+ ",
        "     geom_point(aes(color=Segment), size=3) +",
        "+ ",
        "     geom_errorbar(aes(color=Segment), width=0.3)      # <=======",
        "> ",
        "",
        "> ",
        "p",
        "> ",
        "p <- ggplot(data=prod.sat.seg,",
        "+ ",
        "aes(x=Segment, y=average, ymax=upperCI, ymin=lowerCI)) +",
        "+ ",
        "geom_point(aes(color=Segment), size=3) +",
        "+ ",
        "geom_errorbar(aes(color=Segment), width=0.3) +",
        "+ ",
        "ggtitle(\"Average Sat and Confidence Interval by Segment\") +    # <=====",
        "+ ",
        "ylab(\"Mean satisfaction and 95% CI\")",
        "> ",
        "p",
        "> ",
        "p <- ggplot(data=prod.sat.seg, ",
        "+ ",
        "            aes(x=Segment, y=average, ymax=upperCI, ymin=lowerCI)) +",
        "+ ",
        "     geom_point(aes(color=Segment), size=3) +",
        "+ ",
        "     geom_errorbar(aes(color=Segment), width=0.3) +",
        "+ ",
        "     ggtitle(\"Average Sat and Confidence Interval by Segment\") +    # <=====",
        "+ ",
        "     ylab(\"Mean satisfaction and 95% CI\") +",
        "+ ",
        "     coord_cartesian(ylim=c(1, 5))",
        "> ",
        "  ",
        "> ",
        "p",
        "> ",
        "p <- ggplot(data=prod.sat.seg,",
        "+ ",
        "aes(x=Segment, y=average, ymax=upperCI, ymin=lowerCI)) +",
        "+ ",
        "geom_point(aes(color=Segment), size=3) +",
        "+ ",
        "geom_errorbar(aes(color=Segment), width=0.3) +",
        "+ ",
        "coord_cartesian(ylim=c(1, 5))    # <========",
        "> ",
        "p",
        "> ",
        "p <- ggplot(data=prod.sat.seg, ",
        "+ ",
        "            aes(x=Segment, y=average, ymax=upperCI, ymin=lowerCI)) +",
        "+ ",
        "     geom_point(aes(color=Segment), size=3) +",
        "+ ",
        "     geom_errorbar(aes(color=Segment), width=0.3) +",
        "+ ",
        "     coord_cartesian(ylim=c(1, 5)) +",
        "+ ",
        "     ggtitle(\"Average Sat and Confidence Interval by Segment\") +    # <=====",
        "+ ",
        "     ylab(\"Mean satisfaction and 95% CI\") +",
        "+ ",
        "",
        "+ ",
        "  ",
        "+ ",
        "p",
        "Warning:",
        " Incompatible methods (\"+.gg\", \"Ops.data.frame\") for \"+\"\n",
        "Error in p + o : non-numeric argument to binary operator\n",
        "> ",
        "p <- ggplot(data=prod.sat.seg, ",
        "+ ",
        "            aes(x=Segment, y=average, ymax=upperCI, ymin=lowerCI)) +",
        "+ ",
        "     geom_point(aes(color=Segment), size=3) +",
        "+ ",
        "     geom_errorbar(aes(color=Segment), width=0.3) +",
        "+ ",
        "     coord_cartesian(ylim=c(1, 5)) +",
        "+ ",
        "     ggtitle(\"Average Sat and Confidence Interval by Segment\") +    # <=====",
        "+ ",
        "     ylab(\"Mean satisfaction and 95% CI\")",
        "> ",
        "",
        "> ",
        "  ",
        "> ",
        "p",
        "> ",
        "satData <- read.csv(\"http://r-marketing.r-forge.r-project.org/data/rintro-chapter2.csv\")",
        "> ",
        "# examine the data",
        "> ",
        "str(satData)",
        "'data.frame':\t500 obs. of  5 variables:\n $ iProdSAT : int  6 4 5 3 3 4 4 5 4 4 ...\n $ iSalesSAT: int  2 5 3 3 3 4 3 1 4 2 ...\n $ Segment  : int  1 3 4 2 3 4 1 3 3 3 ...\n $ iProdREC : int  4 4 5 4 2 5 4 3 4 2 ...\n $ iSalesREC: int  3 4 4 4 2 4 2 3 1 2 ...\n",
        "> ",
        "head(satData)",
        "  iProdSAT iSalesSAT Segment iProdREC iSalesREC\n1        6         2       1        4         3\n2        4         5       3        4         4\n3        5         3       4        5         4\n4        3         3       2        4         4\n5        3         3       3        2         2\n6        4         4       4        5         4\n",
        "> ",
        "str(satData)",
        "'data.frame':\t500 obs. of  5 variables:\n $ iProdSAT : int  6 4 5 3 3 4 4 5 4 4 ...\n $ iSalesSAT: int  2 5 3 3 3 4 3 1 4 2 ...\n $ Segment  : int  1 3 4 2 3 4 1 3 3 3 ...\n $ iProdREC : int  4 4 5 4 2 5 4 3 4 2 ...\n $ iSalesREC: int  3 4 4 4 2 4 2 3 1 2 ...\n",
        "> ",
        "summary(satData)",
        "    iProdSAT      iSalesSAT        Segment         iProdREC       iSalesREC    \n Min.   :1.00   Min.   :1.000   Min.   :1.000   Min.   :1.000   Min.   :1.000  \n 1st Qu.:3.00   1st Qu.:3.000   1st Qu.:2.000   1st Qu.:3.000   1st Qu.:3.000  \n Median :4.00   Median :4.000   Median :3.000   Median :4.000   Median :3.000  \n Mean   :4.13   Mean   :3.802   Mean   :2.844   Mean   :4.044   Mean   :3.444  \n 3rd Qu.:5.00   3rd Qu.:5.000   3rd Qu.:4.000   3rd Qu.:5.000   3rd Qu.:4.000  \n Max.   :7.00   Max.   :7.000   Max.   :4.000  ",
        " Max.   :7.000   Max.   :7.000  \n",
        "> ",
        "satData$Segment <- factor(satData$Segment)",
        "> ",
        "summary(satData)",
        "    iProdSAT      iSalesSAT     Segment    iProdREC       iSalesREC    \n Min.   :1.00   Min.   :1.000   1: 54   Min.   :1.000   Min.   :1.000  \n 1st Qu.:3.00   1st Qu.:3.000   2:131   1st Qu.:3.000   1st Qu.:3.000  \n Median :4.00   Median :4.000   3:154   Median :4.000   Median :3.000  \n Mean   :4.13   Mean   :3.802   4:161   Mean   :4.044   Mean   :3.444  \n 3rd Qu.:5.00   3rd Qu.:5.000           3rd Qu.:5.000   3rd Qu.:4.000  \n Max.   :7.00   Max.   :7.000           Max.   :7.000   Max.   :7.000  \n",
        "> ",
        "# Satisfaction by segment",
        "> ",
        "library(ggplot2)",
        "> ",
        "by(satData$iProdSAT, satData$Segment, mean_se, mult=1.96)",
        "satData$Segment: 1\n         y     ymin     ymax\n1 3.462963 3.180534 3.745392\n------------------------------------------------------------------------------ \nsatData$Segment: 2\n         y     ymin    ymax\n1 3.725191 3.557871 3.89251\n------------------------------------------------------------------------------ \nsatData$Segment: 3\n         y     ymin     ymax\n1 4.103896 3.943223 4.264569\n------------------------------------------------------------------------------ \nsatData$Segment: 4\n         y     ymin     ymax",
        "\n1 4.708075 4.556884 4.859265\n",
        "> ",
        "# first aggregate the data we want to plot",
        "> ",
        "# there are other ways to do this, but this illustrates data frame manipulation",
        "> ",
        "satModel <- \"SAT =~ iProdSAT + iSalesSAT",
        "+ ",
        "REC =~ iProdREC + iSalesREC",
        "+ ",
        "REC ~  SAT \"",
        "> ",
        "# fit the structural model",
        "> ",
        "library(lavaan)",
        "> ",
        "sat.fit <- cfa(satModel, data=satData)",
        "Found more than one class \"Model\" in cache; using the first, from namespace 'MatrixModels'\n",
        "> ",
        "# plot the structural model",
        "> ",
        "library(semPlot)",
        "> ",
        "semPaths(sat.fit, what=\"est\", nCharNodes=9, residuals=FALSE)",
        "> ",
        "sem.fit",
        "Error: object 'sem.fit' not found\n",
        "> ",
        "sat.fit",
        "lavaan (0.5-18) converged normally after  31 iterations\n\n  Number of observations                           500\n\n  Estimator                                         ML\n  Minimum Function Test Statistic                2.319\n  Degrees of freedom                                 1\n  P-value (Chi-square)                           0.128\n",
        "> ",
        "summary(sat.fit)",
        "lavaan (0.5-18) converged normally after  31 iterations\n\n  Number of observations                           500\n\n  Estimator                                         ML\n  Minimum Function Test Statistic                2.319\n  Degrees of freedom                                 1\n  P-value (Chi-square)                           0.128\n\nParameter estimates:\n\n  Information                                 Expected\n  Standard Errors                             Standard\n\n                   Estimate  Std.err  Z-value  P(>|z|)\n",
        "Latent variables:\n  SAT =~\n    iProdSAT          1.000\n    iSalesSAT         1.067    0.173    6.154    0.000\n  REC =~\n    iProdREC          1.000\n    iSalesREC         0.900    0.138    6.528    0.000\n\nRegressions:\n  REC ~\n    SAT               0.758    0.131    5.804    0.000\n\nVariances:\n    iProdSAT          0.706    0.088\n    iSalesSAT         0.793    0.100\n    iProdREC          0.892    0.129\n    iSalesREC         0.808    0.107\n    SAT               0.483    0.097\n    REC               0.516    0.115\n",
        "\n",
        "> ",
        "?cfa",
        "> ",
        "summary(sat.fit, fit.measures=TRUE)",
        "lavaan (0.5-18) converged normally after  31 iterations\n\n  Number of observations                           500\n\n  Estimator                                         ML\n  Minimum Function Test Statistic                2.319\n  Degrees of freedom                                 1\n  P-value (Chi-square)                           0.128\n\nModel test baseline model:\n\n  Minimum Function Test Statistic              278.557\n  Degrees of freedom                                 6\n  P-value                                 ",
        "       0.000\n\nUser model versus baseline model:\n\n  Comparative Fit Index (CFI)                    0.995\n  Tucker-Lewis Index (TLI)                       0.971\n\nLoglikelihood and Information Criteria:\n\n  Loglikelihood user model (H0)              -3040.385\n  Loglikelihood unrestricted model (H1)      -3039.225\n\n  Number of free parameters                          9\n  Akaike (AIC)                                6098.769\n  Bayesian (BIC)                              6136.701\n  Sample-size adjusted Bayesian (BIC)     ",
        "    6108.134\n\nRoot Mean Square Error of Approximation:\n\n  RMSEA                                          0.051\n  90 Percent Confidence Interval          0.000  0.142\n  P-value RMSEA <= 0.05                          0.347\n\nStandardized Root Mean Square Residual:\n\n  SRMR                                           0.012\n\nParameter estimates:\n\n  Information                                 Expected\n  Standard Errors                             Standard\n\n                   Estimate  Std.err  Z-value  P(>|z|)\nLatent variables:\n",
        "  SAT =~\n    iProdSAT          1.000\n    iSalesSAT         1.067    0.173    6.154    0.000\n  REC =~\n    iProdREC          1.000\n    iSalesREC         0.900    0.138    6.528    0.000\n\nRegressions:\n  REC ~\n    SAT               0.758    0.131    5.804    0.000\n\nVariances:\n    iProdSAT          0.706    0.088\n    iSalesSAT         0.793    0.100\n    iProdREC          0.892    0.129\n    iSalesREC         0.808    0.107\n    SAT               0.483    0.097\n    REC               0.516    0.115\n\n",
        "> ",
        "library(semPlot)",
        "> ",
        "semPaths(sat.fit, what=\"est\", nCharNodes=9, residuals=FALSE)",
        "> ",
        "summary(sat.fit)6/226",
        "Error: unexpected numeric constant in \"summary(sat.fit)6\"\n",
        "> ",
        "6/226",
        "[1] 0.02654867\n",
        "> ",
        "gcs.satT2.raw <- read.csv(paste0(\"~/Documents/Chris Documents/Work/Cloud\",",
        "+ ",
        "\"/gcs-surveys/tools/\",",
        "+ ",
        "\"Cloud-Lang2-Mobile-Screen1 Jan 2016.csv\"))",
        "Warning in file(file, \"rt\") :",
        "\n ",
        " cannot open file '/Users/cchapman/Documents/Chris Documents/Work/Cloud/gcs-surveys/tools/Cloud-Lang2-Mobile-Screen1 Jan 2016.csv': No such file or directory\n",
        "Error in file(file, \"rt\") : cannot open the connection\n",
        "> ",
        "gcs.satT2.raw <- read.csv(paste0(\"~/Documents/Chris Documents/Work/Cloud\",",
        "+ ",
        "\"/gcs-surveys/tools/jan2016/\",",
        "+ ",
        "\"Cloud-Lang2-Mobile-Screen1 Jan 2016.csv\"))",
        "Warning in file(file, \"rt\") :",
        "\n ",
        " cannot open file '/Users/cchapman/Documents/Chris Documents/Work/Cloud/gcs-surveys/tools/jan2016/Cloud-Lang2-Mobile-Screen1 Jan 2016.csv': No such file or directory\n",
        "Error in file(file, \"rt\") : cannot open the connection\n",
        "> ",
        "gcs.satT2.raw <- read.csv(paste0(\"~/Documents/Chris Documents/Work/Cloud\",",
        "+ ",
        "\"/gcs-surveys/tools/jan2016/\",",
        "+ ",
        "\"Cloud-Lang2-Mobile-Screen1 Jan 2016.xls\"))",
        "Warning in read.table(file = file, header = header, sep = sep, quote = quote,  :",
        "\n ",
        " line 1 appears to contain embedded nulls\n",
        "Warning in read.table(file = file, header = header, sep = sep, quote = quote,  :",
        "\n ",
        " line 2 appears to contain embedded nulls\n",
        "Warning in read.table(file = file, header = header, sep = sep, quote = quote,  :",
        "\n ",
        " line 3 appears to contain embedded nulls\n",
        "Warning in read.table(file = file, header = header, sep = sep, quote = quote,  :",
        "\n ",
        " line 4 appears to contain embedded nulls\n",
        "Warning in read.table(file = file, header = header, sep = sep, quote = quote,  :",
        "\n ",
        " line 5 appears to contain embedded nulls\n",
        "Error in make.names(col.names, unique = TRUE) : \n  invalid multibyte string at '<d0><cf><e0><a1><b1><1a><e1>'\n",
        "> ",
        "library(gdata)",
        "> ",
        "gcs.satT2.raw <- read.xls(paste0(\"~/Documents/Chris Documents/Work/Cloud\",",
        "+ ",
        "\"/gcs-surveys/tools/jan2016/\",",
        "+ ",
        "\"Cloud-Lang2-Mobile-Screen1 Jan 2016.xls\"))",
        "\nRestarting R session...\n\n",
        "> ",
        "install.packages(c(\"ape\", \"arules\", \"BH\", \"car\", \"coda\", \"curl\", \"devtools\", \"DiagrammeR\", \"digest\", \"doParallel\", \"effects\", \"fields\", \"foreach\", \"ggplot2\", \"git2r\", \"Hmisc\", \"htmltools\", \"irlba\", \"iterators\", \"jsonlite\", \"knitr\", \"lavaan\", \"lme4\", \"maps\", \"Matching\", \"maxLik\", \"mclust\", \"multcomp\", \"mvtnorm\", \"pbapply\", \"pbkrtest\", \"qgraph\", \"R6\", \"Rcpp\", \"RcppEigen\", \"rmarkdown\", \"rms\", \"roxygen2\", \"rstudioapi\", \"sandwich\", \"statmod\", \"stringi\", \"V8\", \"vcdExtra\", \"VGAM\", \"visNetwork\", \"xtable\", \"Zelig\", \"ZeligChoice\"))",
        "Error in install.packages : Updating loaded packages\n",
        "> ",
        "install.packages(c(\"class\", \"foreign\", \"MASS\", \"Matrix\", \"mgcv\", \"nlme\", \"nnet\", \"spatial\"), lib=\"/Library/Frameworks/R.framework/Versions/3.2/Resources/library\")",
        "Error in install.packages : Updating loaded packages\n\nRestarting R session...\n\n"
    ],
    "type" : [
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        0,
        1,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        0,
        1,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        2,
        0,
        1,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        2,
        3,
        3,
        3,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        3,
        0,
        1,
        3,
        3,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        3,
        3,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        2,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        3,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        3,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        2,
        2,
        0,
        1,
        2,
        2,
        0,
        1,
        2,
        2,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        2,
        0,
        1,
        2,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        3,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        2,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        2,
        0,
        1,
        2,
        2,
        2,
        0,
        1,
        0,
        1,
        2,
        2,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        3,
        3,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        3,
        3,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2
    ]
}