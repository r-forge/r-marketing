table(sample(names(p1.table), p1.table, replace=TRUE))
p1.table
table(sample(names(p1.table), prob=p1.table, replace=TRUE))
table(sample(names(p1.table), prob=p1.table, replace=TRUE))
table(sample(names(p1.table), prob=p1.table, replace=TRUE))
table(sample(names(p1.table), prob=p1.table, replace=TRUE))
rep(names(p1.table), each=p1.table))
rep(names(p1.table), each=p1.table)
rep(names(p1.table), p1.table)
table(rep(names(p1.table), p1.table))
p1.table
table(sample(rep(names(p1.table), p1.table), sum(p1.table)))
table(sample(rep(names(p1.table), p1.table), sum(p1.table)))
table(sample(rep(names(p1.table), p1.table), sum(p1.table)))
table(sample(rep(names(p1.table), p1.table), sum(p1.table)))
table(sample(rep(names(p1.table), p1.table), sum(p1.table)))
sample(rep(names(p1.table), p1.table), sum(p1.table))
sample(rep(names(p1.table), p1.table), sum(p1.table))
sample(rep(names(p1.table), p1.table), 10
)
sample(rep(names(p1.table), p1.table), 10)
table(sample(rep(names(p1.table), p1.table), 10))
table(sample(rep(names(p1.table), p1.table), 10))
table(sample(rep(names(p1.table), p1.table), 10))
table(sample(rep(names(p1.table), p1.table), 100))
table(sample(rep(names(p1.table), p1.table), 100))
table(sample(rep(names(p1.table), p1.table), 100))
table(sample(rep(names(p1.table), p1.table), 100))
table(sample(rep(names(p1.table), p1.table), 100, replace=TRUE))
table(sample(rep(names(p1.table), p1.table), 100, replace=TRUE))
table(sample(rep(names(p1.table), p1.table), 100, replace=TRUE))
table(sample(rep(names(p1.table), p1.table), 100, replace=TRUE))
sample(rep(names(p1.table), p1.table), sum(p1.table), replace=TRUE)
table(sample(rep(names(p1.table), p1.table), sum(p1.table), replace=TRUE))
table(sample(rep(names(p1.table), p1.table), sum(p1.table), replace=TRUE))
table(sample(rep(names(p1.table), p1.table), sum(p1.table), replace=TRUE))
table(sample(rep(names(p1.table), p1.table), sum(p1.table), replace=TRUE))
table(sample(rep(names(p1.table), p1.table), sum(p1.table), replace=TRUE))
table(sample(rep(names(p1.table), p1.table), sum(p1.table), replace=TRUE))
table(sample(rep(names(p1.table), p1.table), sum(p1.table), replace=TRUE))
table(sample(rep(names(p1.table), p1.table), sum(p1.table), replace=TRUE))
table(sample(rep(names(p1.table), p1.table), sum(p1.table), replace=TRUE))
table(sample(rep(names(p1.table), p1.table), sum(p1.table), replace=TRUE))
table(sample(rep(names(p1.table), p1.table), sum(p1.table), replace=TRUE))
table(sample(rep(names(p1.table), p1.table), sum(p1.table), replace=TRUE))
table(sample(rep(names(p1.table), p1.table), sum(p1.table), replace=TRUE))
table(sample(rep(names(p1.table), p1.table), sum(p1.table), replace=TRUE))
table(sample(rep(names(p1.table), p1.table), sum(p1.table), replace=TRUE))
table(sample(rep(names(p1.table), p1.table), sum(p1.table), replace=TRUE))
table(sample(rep(names(p1.table), p1.table), sum(p1.table), replace=TRUE))
?axis
install.packages(c("rworldmap", "RColorBrewer"))
vignette
vignette()
vignette(zoo)
vignette("zoo")
.40 * 25000
# gcp-gcsSat-2015-1019 == v2 GCP, AWS sat
#
# author : cchapman
### read data
library(gdata)
# gcs.sat2.raw <- read.xls("~/Documents/Chris Documents/Work/Cloud/gcs-surveys/sat/Cloud-Sat1-Mobile-Screen1-20150601.xls", sheet=3, stringsAsFactors=TRUE)
gcs.sat2.raw <- read.xls("~/Downloads/Cloud-Sat2-Mobile-Screen1-AWS.xls", sheet=3, stringsAsFactors=TRUE)
str(gcs.sat2.raw)
names(gcs.sat2.raw)
### make initial clean set
gcs.sat2 <- gcs.sat2.raw[ , c(4, 5, 6, 7, 8, 13:43)]
names(gcs.sat2)
str(gcs.sat2)
tmp.names <- names(gcs.sat2)
tmp.names[6] <- "it.role"
tmp.names[7] <- "cloud.leader"
tmp.names[13] <- "cloudis.os.none"
tmp.names[14] <- "msft.rawtext"
tmp.names[15] <- "cloudis.AmznMarket"
tmp.names[17] <- "cloudis.Elastic"
tmp.names[18] <- "cloudis.KindlePub"
tmp.names[20] <- "cloudis.amzn.none"
tmp.names[26] <- "cloudis.goog.none"
tmp.names[27] <- "using.AWS"
tmp.names[28] <- "using.GCP"
tmp.names[33] <- "using.none"
tmp.names[34] <- "sat.gcp"
tmp.names[35] <- "sat.aws"
tmp.names[36] <- "it.hours"
tmp.names <- gsub("Question\\.\\.7\\.Answer\\.[[:digit:]]\\.", "using", tmp.names)  # replace Q7 items with "using ..."
tmp.names <- gsub("Question\\.\\.[[:digit:]]\\.Answer\\.[[:digit:]]\\.", "cloudis", tmp.names)  # replace all other "Questions" with "cloudis"
cbind(tmp.names, names(gcs.sat2))
names(gcs.sat2) <- tmp.names
### clean up satisfaction scores
# replace "dont know" on sat questions with missing values
gcs.sat2$sat.aws[gcs.sat2$sat.aws == "I don't know, or don't use these"] <- NA
gcs.sat2$sat.gcp[gcs.sat2$sat.gcp == "I don't know, or don't use these"] <- NA
# reorder the factors
gcs.sat2$sat.aws <- factor(gcs.sat2$sat.aws,
ordered=TRUE,
levels = c(
"Very dissatisfied", "Somewhat dissatisfied",
"Neither satisfied nor dissatisfied",
"Somewhat satisfied", "Very satisfied" ))
gcs.sat2$sat.gcp <- factor(gcs.sat2$sat.gcp,
ordered=TRUE,
levels = c(
"Very dissatisfied", "Somewhat dissatisfied",
"Neither satisfied nor dissatisfied",
"Somewhat satisfied", "Very satisfied" ))
##########################################
### determine "good" respondents
gcs.good <- rep(TRUE, nrow(gcs.sat2))   # all good by default
### good step 1 ==> claim cloud
gcs.claim.cloud <- apply(gcs.sat2[ ,27:32], 1, function(x) sum(as.character(x)>" ")) > 0
# table(gcs.claim.cloud)
###
### good step 2 ==> name MSFT service correctly ===> saved for validation only!!
gcp.text.score <- function(textraw, matchlist) {
textdata <- gsub("[[:punct:]]", "", textraw)
# textdata <- tolower(textdata)     ### fails for multibyte encoding
tmp.score <- rep(FALSE, length(textdata))
for (i in seq_along(matchlist)) {
tmp.score <- (tmp.score | grepl(matchlist[i], textdata, ignore.case=TRUE))
}
return(tmp.score)
}
msft.passlist <- c("azure")
gcs.msft.score <- gcp.text.score(gcs.sat2$msft.rawtext, msft.passlist)
table(gcs.claim.cloud, gcs.msft.score)
###
### good step 3 ==> name leader correctly
### NOTE:::: starting with v2, this should always be 100% because it's a screening item in GCS
gcs.sat2.namelead <- gcs.sat2$cloud.leader=="Amazon"
table(gcs.msft.score, gcs.sat2.namelead)
###
### good step 4 ==> pass knowledge screener with 12/18 or better
gcs.sat2[, 13] <- 0  # never matches "none of the above" in v2 because of screener to endorse Linux
gcs.answer.key <- c(0, 1, 0, 1, 1, 0,   # OS
0, 1, 1, 0, 1, 0,   # Amazon
0, 1, 1, 1, 0, 0 )  # Google
gcs.score <- rep(NA, nrow(gcs.sat2))
for (i in seq_along(gcs.sat2[, 1])) { gcs.score[i] <- sum(as.numeric(gcs.sat2[i, c(8:13, 15:26)])-1 == gcs.answer.key) }
table(gcs.claim.cloud & gcs.score >= 12 & gcs.sat2.namelead, gcs.msft.score)
###
### good step 5 ==> get 3/5 correct for the service they user
score.items <- function(data, pos, neg) {
tmp.score <- rep(0, nrow(data))
for (i in pos) {
tmp.score <- tmp.score + ifelse(as.character(data[ , i]) > " ", 1, 0)
}
for (i in neg) {
tmp.score <- tmp.score - ifelse(as.character(data[ , i]) > " ", 1, 0)
}
return(tmp.score)
}
use.aws <- as.character(gcs.sat2$using.AWS) > " "
aws.score <- score.items(gcs.sat2, pos=c(16, 17, 19), neg=c(15, 18, 20))
table(aws.score)
gcs.aws.good <- ifelse(use.aws, aws.score >=2, TRUE)
table(gcs.aws.good)
use.gcp <- as.character(gcs.sat2$using.GCP) > " "
gcp.score <- score.items(gcs.sat2, pos=c(22, 23, 24), neg=c(21, 25, 26))
table(gcp.score)
gcs.gcp.good <- ifelse(use.gcp, gcp.score >=2, TRUE)
table(gcs.gcp.good)
gcs.sat2.good <- gcs.claim.cloud & gcs.sat2.namelead & gcs.aws.good & gcs.gcp.good & gcs.score >= 12
### check validity vs azure
## for GCP users
prop.table(table(gcs.sat2.good, gcs.msft.score, gcs.sat2$using.GCP), margin=c(1,3))
## for AWS users
prop.table(table(gcs.sat2.good, gcs.msft.score, gcs.sat2$using.AWS), margin=c(1,3))
### AWS sat
prop.table(table(gcs.sat2$sat.aws[gcs.sat2.good & use.aws]))
### GCP sat
prop.table(table(gcs.sat2$sat.gcp[gcs.sat2.good & use.gcp]))
### AWS & GCP for users of both
prop.table(table(gcs.sat2$sat.aws[gcs.sat2.good & use.aws & use.gcp]))  # AWS
prop.table(table(gcs.sat2$sat.gcp[gcs.sat2.good & use.aws & use.gcp]))  # GCP
########
with(gcs.sat2[gcs.sat2.good,], prop.table(table(using.GCP, using.AWS), margin=1))  # Odds of AWS
with(gcs.sat2[gcs.sat2.good,], prop.table(table(using.GCP, using.AWS), margin=2))  # Odds of GCP
#### ECDF
plot(ecdf(gcs.score[gcs.claim.cloud]),
do.points=FALSE, col="red", verticals=TRUE, col.vert="gray90",
main="Claim Cloud usage (red), vs. Knowledgeable (green)",
ylab="Cumulative proportion scoring at or below X value", xlab="Correct answers out of 18")
lines(ecdf(gcs.score[gcs.sat2.good]),
do.points=FALSE, col="green4", verticals=TRUE, col.vert="gray90")
?ecdf
(.27*.27+.27*.08+.27*.08)
(.27*.27+.27*.08+.27*.08) * (0.41) * (0.66)
id.class <- read.csv("/Users/cchapman/Documents/Chris Documents/Work/Civics/civicProfile_6group.csv")
names(id.class)
# load SSI/Web export (match SSI ID to SSI/Web ID)
id.id <- read.csv("/Users/cchapman/Documents/Chris Documents/Work/Civics/civics-profiles-SSI-export.csv")
names(id.id)
# load SSI demographics (match demographics to SSI ID)
id.demo <- read.csv("/Users/cchapman/Documents/Chris Documents/Work/Civics/SSI-20141029-UPDATED.csv")
names(id.demo)
# merge Profile classes with the PIDs from SSI/Web data, using respNum as the link
tmp.merge1 <- merge(id.class, id.id[ , c(1, 43, 77:86)], by.x="ssiid", by.y="sys_RespNum")
head(tmp.merge1)
# merge the previous results with SSI data using PID as the link
tmp.merge2 <- merge(tmp.merge1, id.demo, by.x="pid", by.y="entity")
head(tmp.merge2)
dim(tmp.merge2)
library(car)
some(tmp.merge2)
####
prof.df <- tmp.merge2
names(prof.df)
summary(prof.df)
# segment distribution
with(prof.df, prop.table(table(class6group)))
# function to break out a particular variable by segment
profBy <- function(var, test="") {
# var = a string naming the variable to break out by segment
# test = a string for "missing" results
print(var) # show what we're looking at
rows <- which(as.character(prof.df[ , var]) > test) # get non-blank rows
# break the variable out by the segment groups
tab  <- prop.table(table(prof.df[rows, var], prof.df$class6group[rows]), 2)
# remove spaces in the row names, to make it easier to split in a spreadsheet
tmp.names <- dimnames(tab)[[1]]
dimnames(tab)[[1]] <- gsub(" ", "_", tmp.names)
return(tab)
}
profBy("income")  # test that it works
# do it for all the variables of interest
for (i in c("income","employment","ethnic","gender","childrenyn","educ",
"polview","polparty","marital")) print(profBy(i), digits=2)
# break out age descriptives by group
t(aggregate(age  ~ class6group, prof.df, function(x) quantile(x, p=c(0.25, 0.5, 0.75))))
### biplot
prof.mean <- read.csv(
"/Users/cchapman/Documents/Chris Documents/Work/Civics/civicsProfiles-GroupAvgs.csv",
stringsAsFactors=FALSE)
str(prof.mean)
t(prof.mean[ , -2])
(prof.meant <- data.frame(t(prof.mean[ , -2]), stringsAsFactors=FALSE))
str(prof.meant)
names(prof.meant)
str(prof.meant[1, ])
as.character(prof.meant[1, ])
(names(prof.meant) <- as.character(prof.meant[1 , ]))
prof.meant <- prof.meant[-1, ]
prof.num <- data.frame(lapply(prof.meant, as.numeric))
prof.num
prof.pca <- prcomp(prof.num)
biplot(prof.pca)
biplot(prof.pca, choices=c(2,3))
library(corrplot)
cor.cols <- c(1,2, 4,5,6, 8,9, 11,12, 14, 15, 17, 18, 20, 21, 22, 24, 25, 26)
corrplot(cor(prof.num[, cor.cols]))
corrplot(cor(prof.num[, cor.cols]), col = rev(brewer.pal(9, "Greys")[4:9]), tl.col="black")
library(RColorBrewer)
corrplot(cor(prof.num[, cor.cols]), col = rev(brewer.pal(9, "Greys")[4:9]), tl.col="black")
library(randomForest)
lapply(prof.df, function(x) sum(as.character(x) > ""))
sapply(prof.df, function(x) sum(as.character(x) > ""))
sapply(prof.df, function(x) sum(as.character(x) > "")/length(x))
with(prof.df, table(polview, polparty))
with(prof.df, prop.table(table(polview, polparty)))
with(prof.df, prop.table(table(polview, polparty)), margin=2)
with(subset(prof.df, polparty > ""), prop.table(table(class6group)))
with(subset(prof.df, as.character(polparty) > ""), prop.table(table(class6group)))
with(subset(prof.df, as.character(polparty) > " "), prop.table(table(class6group)))
subset(prof.df, as.character(polparty) > " ")
with(prof.df, prop.table(table(class6group)))
with(subset(prof.df, as.character(polparty)>" "), prop.table(table(polview, polparty)), margin=2)
with(subset(prof.df, as.character(polview)>" "), prop.table(table(polview, polparty)), margin=2)
with(subset(prof.df, as.character(polview)>" " & as.character(polparty)>" "), prop.table(table(polview, polparty)), margin=2)
with(subset(prof.df, as.character(polview)>" " & as.character(polparty)>" "), prop.table(table(polview, polparty), margin=2))
with(subset(prof.df, as.character(polview)>" " & as.character(polparty)>" "), prop.table(table(polview, polparty), margin=1))
print(with(subset(prof.df, as.character(polview)>" " & as.character(polparty)>" "), prop.table(table(polview, polparty), margin=1)),digits=2)
print(with(subset(prof.df, as.character(polview)>" " & as.character(polparty)>" "), prop.table(table(polview, polparty), margin=1)),digits=2)
sapply(prof.df, function(x) sum(as.character(x) > "")/length(x))
sapply(prof.df, function(x) sum(as.character(x) > "")
)
table(prof.df$smartphone)
?factor
plot(cust.df$store.spend, cust.df$online.spend,
main="Customers as of June 2014",
xlab="Prior 12 months in-store sales ($)",
ylab="Prior 12 months online sales ($)",
cex=0.7)
cust.df <- read.csv("http://goo.gl/PmPkaG")
cust.df$cust.id <- factor(cust.df$cust.id)
plot(cust.df$store.spend, cust.df$online.spend,
main="Customers as of June 2014",
xlab="Prior 12 months in-store sales ($)",
ylab="Prior 12 months online sales ($)",
cex=0.7)
plot(cust.df$store.spend, cust.df$online.spend,
main="Customers as of June 2014",
xlab="Prior 12 months in-store sales ($)",
ylab="Prior 12 months online sales ($)",
cex=0.7)
hist(cust.df$store.spend,
breaks=(0:ceiling(max(cust.df$store.spend)/10))*10,
main="Customers as of June 2014",
xlab="Prior 12 months online sales ($)",
ylab="Count of customers")
my.col <- c("black", "green3")
my.pch <- c(1, 19) # R's symbols for solid and open circles (see ?points)
head(cust.df$email)
as.numeric(head(cust.df$email))
my.col[as.numeric(head(cust.df$email))]
my.col[head(cust.df$email)]
#Try it!
plot(cust.df$store.spend, cust.df$online.spend,
col=as.numeric(cust.df$email))
plot(cust.df$store.spend, cust.df$online.spend,
cex=0.7,
col=my.col[cust.df$email], pch=my.pch[cust.df$email],
main="Customers as of June 2014",
xlab="Prior 12 months in-store sales ($)",
ylab="Prior 12 months online sales ($)" )
legend(x="topright", legend=paste("email on file:", levels(cust.df$email)),
col=my.col, pch=my.pch)
# Try it!
plot(cust.df$store.spend + 1, cust.df$online.spend + 1,
log="xy", cex=0.7,
col=my.col[cust.df$email], pch=my.pch[cust.df$email],
main="Customers as of June 2014",
xlab="Prior 12 months in-store sales ($)",
ylab="Prior 12 months online sales ($)" )
legend(x="topright", legend=paste("email on file:", levels(cust.df$email)),
col=my.col, pch=my.pch)
plot(cust.df$store.spend, cust.df$online.spend,
main="Customers as of June 2014",
xlab="Prior 12 months in-store sales ($)",
ylab="Prior 12 months online sales ($)",
cex=0.7)
plot(cust.df$store.spend + 1, cust.df$online.spend + 1,
log="xy", cex=0.7,
main="Customers as of June 2014",
xlab="Prior 12 months in-store sales ($)",
ylab="Prior 12 months online sales ($)" )
?ceiling
ceiling(9.9)
cor(log(cust.df$store.spend+1), log(cust.df$online.spend+1))
par(mfrow=c(2, 2))
with(cust.df, plot(distance.to.store, store.spend))
with(cust.df, plot(distance.to.store, online.spend))
with(cust.df, plot(distance.to.store, store.spend+1, log="xy"))
with(cust.df, plot(distance.to.store, online.spend+1, log="xy"))
par(mfrow=c(3, 2))
with(cust.df, plot(distance.to.store, store.spend))
with(cust.df, plot(distance.to.store, online.spend))
with(cust.df, plot(distance.to.store, store.spend+1, log="xy"))
with(cust.df, plot(distance.to.store, online.spend+1, log="xy"))
par(mfrow=c(4, 1))
with(cust.df, plot(distance.to.store, store.spend))
with(cust.df, plot(distance.to.store, online.spend))
with(cust.df, plot(distance.to.store, store.spend+1, log="xy"))
with(cust.df, plot(distance.to.store, online.spend+1, log="xy"))
par(mfrow=c(4, 1))
with(cust.df, plot(distance.to.store, store.spend))
with(cust.df, plot(distance.to.store, online.spend))
with(cust.df, plot(distance.to.store, store.spend+1, log="xy"))
with(cust.df, plot(distance.to.store, online.spend+1, log="xy"))
par(mfrow=c(4, 1))
with(cust.df, plot(distance.to.store, store.spend))
with(cust.df, plot(distance.to.store, online.spend))
with(cust.df, plot(distance.to.store, store.spend+1, log="xy"))
with(cust.df, plot(distance.to.store, online.spend+1, log="xy"))
par(mfrow=c(4, 1))
with(cust.df, plot(distance.to.store, store.spend))
with(cust.df, plot(distance.to.store, online.spend))
with(cust.df, plot(distance.to.store, store.spend+1, log="xy"))
with(cust.df, plot(distance.to.store, online.spend+1, log="xy"))
par(mfrow=c(1,4))
with(cust.df, plot(distance.to.store, store.spend))
with(cust.df, plot(distance.to.store, online.spend))
with(cust.df, plot(distance.to.store, store.spend+1, log="xy"))
with(cust.df, plot(distance.to.store, online.spend+1, log="xy"))
?corrplot.mixed
?prop.tabl;e
?prop.table
prop.table
18000/14
17898/13
1/(1+44+579)
q1mu <- 2.42
q2mu <- 2.27
q4mu <- 2.15
n.qs <- 400
q1norm <- rnorm(n.qs, mean=q1.mu)
q1norm <- rnorm(n.qs, mean=q1mu)
q2norm <- rnorm(n.qs, mean=q2mu)
q4norm <- rnorm(n.qs, mean=q4mu)
t.test(q1.norm, q2.norm)
t.test(q1norm, q2norm)
t.test(q2norm, q4norm)
t.test(q1norm, q4norm)
q1norm
summary(q1norm)
t.test(q2norm, q4norm)
floor(q1norm)
q1norm <- floor(rnorm(n.qs, mean=q1mu))
q2norm <- floor(rnorm(n.qs, mean=q2mu))
q4norm <- floor(rnorm(n.qs, mean=q4mu))
t.test(q1norm, q2norm)
t.test(q2norm, q4norm)
t.test(q1norm, q4norm)
?wilcox.test
wilcox.test(q1norm, q2norm)
wilcox.test(q2norm, q4norm)
wilcox.test(q1norm, q4norm)
set.seed(98103)
x1 <- rnorm(100)
x2 <- rnorm(100)
y <- x1 + x2 + x1*x2 + rnorm(100)
lm(y ~ x1 + x2 + x1*x2)
(x1a <- scale(x1))
(x2a <- scale(x2))
(x1a <- scale(x1) + 10)
(x2a <- scale(x2) + 10)
(x1a <- scale(x1) + 5)
(x2a <- scale(x2) + 5)
(x1a <- scale(x1) + 5)
(x2a <- scale(x2) + 5)
lm(y ~ x1a + x2a + x1a*x2a)
summary(lm(y ~ x1 + x2 + x1*x2))
(x1a <- scale(x1) + 5)
(x2a <- scale(x2) + 5)
summary(lm(y ~ x1a + x2a + x1a*x2a))
summary(lm(y ~ x1 + x2 + x1*x2))
summary(lm(y ~ x1a + x2a + x1a*x2a))
set.seed(98103)
x1 <- scale(rnorm(100))
x2 <- scale(rnorm(100))
y <- x1 + x2 + x1*x2 + rnorm(100)
(x1a <- x1 + 10)
(x2a <- x2 + 10)
summary(lm(y ~ x1 + x2 + x1*x2))
summary(lm(y ~ x1a + x2a + x1a*x2a))
summary(lm(y ~ x1 + x2))
summary(lm(y ~ x1a + x2a))
x12 <- scale(x1*x2)
x12a <- x12+10
summary(lm(y ~ x1 + x2 + x12))
summary(lm(y ~ x1a + x2a + x12a))
x1
summary(x1)
summary(x1a)
summary(lm(y ~ x1 + x2 + x1*x2))
summary(lm(y ~ x1a + x2a + x1a*x2a))
summary(x12)
summary(x12a)
summary(lm(y ~ x1 + x2 + x12))
summary(lm(y ~ x1a + x2a + x12a))
x12a <- scale((x1+10)*(x2+10))
summary(lm(y ~ x1 + x2 + x12))
summary(lm(y ~ x1a + x2a + x12a))
x12 <- scale(x1*x2)
x12a <- x12+10
summary(lm(y ~ x1 + x2 + x12))
summary(lm(y ~ x1a + x2a + x12a))
780.35
780.35/3
35*40
34/43
34+37+32
34/103
32/103
37/103
?binom.test
binom.test(8, 10, p=0.5)
binom.test(8, 10, p=0.1)
binom.test(8, 10, p=0)
binom.test(8, 10, p=0.01)
binom.test(8, 10, p=0.5)
(1.0 + 2.5*3) / 4
(1.0 + 2.4*3) / 4
read.csv("http://bit.ly/1OoZ0Mq")
4^5
binom.test(10, 11, p=6/11)
read.csv("12.34.45")
sat <- c(10, 5, 20, 5, 25)
three.boot <- function(count.data, count.levels=NA,
boot.k=1000, big.mult=10000000/sum(count.data),
alpha=0.05, silent=FALSE, samp.k=sum(count.data)) {
if (length(count.levels) == 1 && is.na(count.levels)) {
count.levels <- 1:length(count.data)
}
bigData <- rep(count.levels, times=count.data*big.mult)
table(bigData)
boot.out <- matrix(NA, nrow=boot.k, ncol=3)
if (boot.k > 100 && !silent) {
cat("Bootstrapping ")
}
for (i in 1:boot.k) {
if (!silent && i %% 100 == 0) {
cat(".")
}
boot.samp <- sample(bigData, samp.k)
boot.p <- prop.table(table(factor(boot.samp, levels=count.levels)))
# top 2 box
boot.out[i, 1] <- as.numeric(boot.p[5]) + as.numeric(boot.p[4])
# top 2 box
boot.out[i, 2] <- as.numeric(boot.p[5])
# pseudo NPS
boot.out[i, 3] <- as.numeric(boot.p[5]) - as.numeric(boot.p[3]) - as.numeric(boot.p[2]) - as.numeric(boot.p[1])
}
if (boot.k > 100 && !silent) {
cat(" done.\n\n")
}
return(t(apply(boot.out, 2,
function(x) quantile(x, probs=c(alpha/2, 0.5, 1-alpha/2)))))
}
sat <- c(10, 5, 20, 5, 25)
three.boot(sat)
